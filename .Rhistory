setMethod("randomForest", "oe", function(object){
if(nrow(object@oesubsample)==0){object <- subsample(object)}
names(object@predictors)[which(names(object@predictors) == "TEMP_00_09")] <- "AvgTemp00_09"
names(object@predictors)[which(names(object@predictors) == "PPT_00_09")] <- "AvgPPT00_09"
names(object@predictors)[which(names(object@predictors) == "LogWSA")] <- "Log_Area"
names(object@predictors)[which(names(object@predictors) == "SITE_ELEV")] <-  "AvgOfElevation"
Pc=0.5
object@predictors <- merge(unique(object@oesubsample[, c("StationCode", "SampleID")]), object@predictors,
by="StationCode")
row.names(object@predictors) <- paste(object@predictors$StationCode, "%", object@predictors$SampleID,
sep="")
iterate <- function(rep){
patable <- dcast(object@oesubsample[, c("StationCode", "SampleID", "STE", rep)],
StationCode + SampleID ~ STE, value.var=rep, mean)
patable[is.na(patable)] <- 0
row.names(patable) <- paste(patable$StationCode, "%", patable$SampleID, sep="")
iresult <- model.predict.RanFor.4.2(object@bugcal.pa, object@grps.final, object@preds.final, object@rf.mod, prednew=object@predictors,
bugnew=patable,Pc,Cal.OOB=FALSE)
iresult$SampleID <- unique(patable$SampleID)
return(iresult)
}
object@fulliterations <- lapply(paste("Replicate", 1:20), function(i)iterate(i))
labels <- strsplit(row.names(object@fulliterations[[1]]), "%")
labels <- matrix(unlist(labels), nrow=length(labels), byrow=T)
print(str(labels))
object@fulliterations <- lapply(object@fulliterations, function(l)row.names(l)<-labels[, 2])
row.names(object@predictors) <- strsplit(row.names(object@predictors), "%")[, 2]
object@iterations <- do.call(cbind, lapply(object@fulliterations, function(l)l[, 3]))
object@oeresults <- data.frame(labels, apply(object@iterations, 1, mean))
names(object@oeresults) <- c("StationCode", "SampleID", "OoverE")
object
})
test2 <- score(test1)
setMethod("randomForest", "oe", function(object){
if(nrow(object@oesubsample)==0){object <- subsample(object)}
names(object@predictors)[which(names(object@predictors) == "TEMP_00_09")] <- "AvgTemp00_09"
names(object@predictors)[which(names(object@predictors) == "PPT_00_09")] <- "AvgPPT00_09"
names(object@predictors)[which(names(object@predictors) == "LogWSA")] <- "Log_Area"
names(object@predictors)[which(names(object@predictors) == "SITE_ELEV")] <-  "AvgOfElevation"
Pc=0.5
object@predictors <- merge(unique(object@oesubsample[, c("StationCode", "SampleID")]), object@predictors,
by="StationCode")
row.names(object@predictors) <- paste(object@predictors$StationCode, "%", object@predictors$SampleID,
sep="")
iterate <- function(rep){
patable <- dcast(object@oesubsample[, c("StationCode", "SampleID", "STE", rep)],
StationCode + SampleID ~ STE, value.var=rep, mean)
patable[is.na(patable)] <- 0
row.names(patable) <- paste(patable$StationCode, "%", patable$SampleID, sep="")
iresult <- model.predict.RanFor.4.2(object@bugcal.pa, object@grps.final, object@preds.final, object@rf.mod, prednew=object@predictors,
bugnew=patable,Pc,Cal.OOB=FALSE)
iresult$SampleID <- unique(patable$SampleID)
return(iresult)
}
object@fulliterations <- lapply(paste("Replicate", 1:20), function(i)iterate(i))
labels <- strsplit(row.names(object@fulliterations[[1]]), "%")
labels <- as.data.frame(matrix(unlist(labels), nrow=length(labels), byrow=T))
print(str(labels))
object@fulliterations <- lapply(object@fulliterations, function(l)row.names(l)<-labels[, 2])
row.names(object@predictors) <- strsplit(row.names(object@predictors), "%")[, 2]
object@iterations <- do.call(cbind, lapply(object@fulliterations, function(l)l[, 3]))
object@oeresults <- data.frame(labels, apply(object@iterations, 1, mean))
names(object@oeresults) <- c("StationCode", "SampleID", "OoverE")
object
})
test2 <- score(test1)
setMethod("randomForest", "oe", function(object){
if(nrow(object@oesubsample)==0){object <- subsample(object)}
names(object@predictors)[which(names(object@predictors) == "TEMP_00_09")] <- "AvgTemp00_09"
names(object@predictors)[which(names(object@predictors) == "PPT_00_09")] <- "AvgPPT00_09"
names(object@predictors)[which(names(object@predictors) == "LogWSA")] <- "Log_Area"
names(object@predictors)[which(names(object@predictors) == "SITE_ELEV")] <-  "AvgOfElevation"
Pc=0.5
object@predictors <- merge(unique(object@oesubsample[, c("StationCode", "SampleID")]), object@predictors,
by="StationCode")
row.names(object@predictors) <- paste(object@predictors$StationCode, "%", object@predictors$SampleID,
sep="")
iterate <- function(rep){
patable <- dcast(object@oesubsample[, c("StationCode", "SampleID", "STE", rep)],
StationCode + SampleID ~ STE, value.var=rep, mean)
patable[is.na(patable)] <- 0
row.names(patable) <- paste(patable$StationCode, "%", patable$SampleID, sep="")
iresult <- model.predict.RanFor.4.2(object@bugcal.pa, object@grps.final, object@preds.final, object@rf.mod, prednew=object@predictors,
bugnew=patable,Pc,Cal.OOB=FALSE)
iresult$SampleID <- unique(patable$SampleID)
return(iresult)
}
object@fulliterations <- lapply(paste("Replicate", 1:20), function(i)iterate(i))
labels <- strsplit(row.names(object@fulliterations[[1]]), "%")
labels <- as.data.frame(matrix(unlist(labels), nrow=length(labels), byrow=T))
object@fulliterations <- lapply(object@fulliterations, function(l)row.names(l)<-labels[, 2])
row.names(object@predictors) <- (matrix(unlist(strsplit(row.names(object@predictors), "%")),
nrow=length(labels), byrow=T))[, 2]
object@iterations <- do.call(cbind, lapply(object@fulliterations, function(l)l[, 3]))
object@oeresults <- data.frame(labels, apply(object@iterations, 1, mean))
names(object@oeresults) <- c("StationCode", "SampleID", "OoverE")
object
})
test2 <- score(test1)
setMethod("randomForest", "oe", function(object){
if(nrow(object@oesubsample)==0){object <- subsample(object)}
names(object@predictors)[which(names(object@predictors) == "TEMP_00_09")] <- "AvgTemp00_09"
names(object@predictors)[which(names(object@predictors) == "PPT_00_09")] <- "AvgPPT00_09"
names(object@predictors)[which(names(object@predictors) == "LogWSA")] <- "Log_Area"
names(object@predictors)[which(names(object@predictors) == "SITE_ELEV")] <-  "AvgOfElevation"
Pc=0.5
object@predictors <- merge(unique(object@oesubsample[, c("StationCode", "SampleID")]), object@predictors,
by="StationCode")
row.names(object@predictors) <- paste(object@predictors$StationCode, "%", object@predictors$SampleID,
sep="")
iterate <- function(rep){
patable <- dcast(object@oesubsample[, c("StationCode", "SampleID", "STE", rep)],
StationCode + SampleID ~ STE, value.var=rep, mean)
patable[is.na(patable)] <- 0
row.names(patable) <- paste(patable$StationCode, "%", patable$SampleID, sep="")
iresult <- model.predict.RanFor.4.2(object@bugcal.pa, object@grps.final, object@preds.final, object@rf.mod, prednew=object@predictors,
bugnew=patable,Pc,Cal.OOB=FALSE)
iresult$SampleID <- unique(patable$SampleID)
return(iresult)
}
object@fulliterations <- lapply(paste("Replicate", 1:20), function(i)iterate(i))
labels <- strsplit(row.names(object@fulliterations[[1]]), "%")
labels <- as.data.frame(matrix(unlist(labels), nrow=length(labels), byrow=T))
object@fulliterations <- lapply(object@fulliterations, function(l)row.names(l)<-labels[, 2])
plabels <- strsplit(row.names(object@predictors), "%")
print(str(plabels))
row.names(object@predictors) <- matrix(unlist(plabels), nrow=length(labels), byrow=T)[, 2]
object@iterations <- do.call(cbind, lapply(object@fulliterations, function(l)l[, 3]))
object@oeresults <- data.frame(labels, apply(object@iterations, 1, mean))
names(object@oeresults) <- c("StationCode", "SampleID", "OoverE")
object
})
test2 <- score(test1)
setMethod("randomForest", "oe", function(object){
if(nrow(object@oesubsample)==0){object <- subsample(object)}
names(object@predictors)[which(names(object@predictors) == "TEMP_00_09")] <- "AvgTemp00_09"
names(object@predictors)[which(names(object@predictors) == "PPT_00_09")] <- "AvgPPT00_09"
names(object@predictors)[which(names(object@predictors) == "LogWSA")] <- "Log_Area"
names(object@predictors)[which(names(object@predictors) == "SITE_ELEV")] <-  "AvgOfElevation"
Pc=0.5
object@predictors <- merge(unique(object@oesubsample[, c("StationCode", "SampleID")]), object@predictors,
by="StationCode")
row.names(object@predictors) <- paste(object@predictors$StationCode, "%", object@predictors$SampleID,
sep="")
iterate <- function(rep){
patable <- dcast(object@oesubsample[, c("StationCode", "SampleID", "STE", rep)],
StationCode + SampleID ~ STE, value.var=rep, mean)
patable[is.na(patable)] <- 0
row.names(patable) <- paste(patable$StationCode, "%", patable$SampleID, sep="")
iresult <- model.predict.RanFor.4.2(object@bugcal.pa, object@grps.final, object@preds.final, object@rf.mod, prednew=object@predictors,
bugnew=patable,Pc,Cal.OOB=FALSE)
iresult$SampleID <- unique(patable$SampleID)
return(iresult)
}
object@fulliterations <- lapply(paste("Replicate", 1:20), function(i)iterate(i))
labels <- strsplit(row.names(object@fulliterations[[1]]), "%")
labels <- as.data.frame(matrix(unlist(labels), nrow=length(labels), byrow=T))
object@fulliterations <- lapply(object@fulliterations, function(l)row.names(l)<-labels[, 2])
plabels <- strsplit(row.names(object@predictors), "%")
plabels <- as.data.frame(matrix(unlist(plabels), nrow=length(labels), byrow=T)[, 2])
print(str(plabels))
row.names(object@predictors) <- plabels[, 2]
object@iterations <- do.call(cbind, lapply(object@fulliterations, function(l)l[, 3]))
object@oeresults <- data.frame(labels, apply(object@iterations, 1, mean))
names(object@oeresults) <- c("StationCode", "SampleID", "OoverE")
object
})
test2 <- score(test1)
setMethod("randomForest", "oe", function(object){
if(nrow(object@oesubsample)==0){object <- subsample(object)}
names(object@predictors)[which(names(object@predictors) == "TEMP_00_09")] <- "AvgTemp00_09"
names(object@predictors)[which(names(object@predictors) == "PPT_00_09")] <- "AvgPPT00_09"
names(object@predictors)[which(names(object@predictors) == "LogWSA")] <- "Log_Area"
names(object@predictors)[which(names(object@predictors) == "SITE_ELEV")] <-  "AvgOfElevation"
Pc=0.5
object@predictors <- merge(unique(object@oesubsample[, c("StationCode", "SampleID")]), object@predictors,
by="StationCode")
row.names(object@predictors) <- paste(object@predictors$StationCode, "%", object@predictors$SampleID,
sep="")
iterate <- function(rep){
patable <- dcast(object@oesubsample[, c("StationCode", "SampleID", "STE", rep)],
StationCode + SampleID ~ STE, value.var=rep, mean)
patable[is.na(patable)] <- 0
row.names(patable) <- paste(patable$StationCode, "%", patable$SampleID, sep="")
iresult <- model.predict.RanFor.4.2(object@bugcal.pa, object@grps.final, object@preds.final, object@rf.mod, prednew=object@predictors,
bugnew=patable,Pc,Cal.OOB=FALSE)
iresult$SampleID <- unique(patable$SampleID)
return(iresult)
}
object@fulliterations <- lapply(paste("Replicate", 1:20), function(i)iterate(i))
labels <- strsplit(row.names(object@fulliterations[[1]]), "%")
labels <- as.data.frame(matrix(unlist(labels), nrow=length(labels), byrow=T))
object@fulliterations <- lapply(object@fulliterations, function(l)row.names(l)<-labels[, 2])
plabels <- strsplit(row.names(object@predictors), "%")
plabels <- as.data.frame(matrix(unlist(plabels), nrow=length(labels), byrow=T)
print(str(plabels))
row.names(object@predictors) <- plabels[, 2]
object@iterations <- do.call(cbind, lapply(object@fulliterations, function(l)l[, 3]))
object@oeresults <- data.frame(labels, apply(object@iterations, 1, mean))
names(object@oeresults) <- c("StationCode", "SampleID", "OoverE")
object
})
setMethod("randomForest", "oe", function(object){
if(nrow(object@oesubsample)==0){object <- subsample(object)}
names(object@predictors)[which(names(object@predictors) == "TEMP_00_09")] <- "AvgTemp00_09"
names(object@predictors)[which(names(object@predictors) == "PPT_00_09")] <- "AvgPPT00_09"
names(object@predictors)[which(names(object@predictors) == "LogWSA")] <- "Log_Area"
names(object@predictors)[which(names(object@predictors) == "SITE_ELEV")] <-  "AvgOfElevation"
Pc=0.5
object@predictors <- merge(unique(object@oesubsample[, c("StationCode", "SampleID")]), object@predictors,
by="StationCode")
row.names(object@predictors) <- paste(object@predictors$StationCode, "%", object@predictors$SampleID,
sep="")
iterate <- function(rep){
patable <- dcast(object@oesubsample[, c("StationCode", "SampleID", "STE", rep)],
StationCode + SampleID ~ STE, value.var=rep, mean)
patable[is.na(patable)] <- 0
row.names(patable) <- paste(patable$StationCode, "%", patable$SampleID, sep="")
iresult <- model.predict.RanFor.4.2(object@bugcal.pa, object@grps.final, object@preds.final, object@rf.mod, prednew=object@predictors,
bugnew=patable,Pc,Cal.OOB=FALSE)
iresult$SampleID <- unique(patable$SampleID)
return(iresult)
}
object@fulliterations <- lapply(paste("Replicate", 1:20), function(i)iterate(i))
labels <- strsplit(row.names(object@fulliterations[[1]]), "%")
labels <- as.data.frame(matrix(unlist(labels), nrow=length(labels), byrow=T))
object@fulliterations <- lapply(object@fulliterations, function(l)row.names(l)<-labels[, 2])
plabels <- strsplit(row.names(object@predictors), "%")
plabels <- as.data.frame(matrix(unlist(plabels), nrow=length(labels), byrow=T))
print(str(plabels))
row.names(object@predictors) <- plabels[, 2]
object@iterations <- do.call(cbind, lapply(object@fulliterations, function(l)l[, 3]))
object@oeresults <- data.frame(labels, apply(object@iterations, 1, mean))
names(object@oeresults) <- c("StationCode", "SampleID", "OoverE")
object
})
test2 <- score(test1)
setMethod("randomForest", "oe", function(object){
if(nrow(object@oesubsample)==0){object <- subsample(object)}
names(object@predictors)[which(names(object@predictors) == "TEMP_00_09")] <- "AvgTemp00_09"
names(object@predictors)[which(names(object@predictors) == "PPT_00_09")] <- "AvgPPT00_09"
names(object@predictors)[which(names(object@predictors) == "LogWSA")] <- "Log_Area"
names(object@predictors)[which(names(object@predictors) == "SITE_ELEV")] <-  "AvgOfElevation"
Pc=0.5
object@predictors <- merge(unique(object@oesubsample[, c("StationCode", "SampleID")]), object@predictors,
by="StationCode")
row.names(object@predictors) <- paste(object@predictors$StationCode, "%", object@predictors$SampleID,
sep="")
iterate <- function(rep){
patable <- dcast(object@oesubsample[, c("StationCode", "SampleID", "STE", rep)],
StationCode + SampleID ~ STE, value.var=rep, mean)
patable[is.na(patable)] <- 0
row.names(patable) <- paste(patable$StationCode, "%", patable$SampleID, sep="")
iresult <- model.predict.RanFor.4.2(object@bugcal.pa, object@grps.final, object@preds.final, object@rf.mod, prednew=object@predictors,
bugnew=patable,Pc,Cal.OOB=FALSE)
iresult$SampleID <- unique(patable$SampleID)
return(iresult)
}
object@fulliterations <- lapply(paste("Replicate", 1:20), function(i)iterate(i))
labels <- strsplit(row.names(object@fulliterations[[1]]), "%")
labels <- as.data.frame(matrix(unlist(labels), nrow=length(labels), byrow=T))
object@fulliterations <- lapply(object@fulliterations, function(l)row.names(l)<-labels[, 2])
object@iterations <- do.call(cbind, lapply(object@fulliterations, function(l)l[, 3]))
object@oeresults <- data.frame(labels, apply(object@iterations, 1, mean))
names(object@oeresults) <- c("StationCode", "SampleID", "OoverE")
object
})
test2 <- score(test1)
traceback()
str(oeresults@fulliterations[[1]])
setMethod("randomForest", "oe", function(object){
if(nrow(object@oesubsample)==0){object <- subsample(object)}
names(object@predictors)[which(names(object@predictors) == "TEMP_00_09")] <- "AvgTemp00_09"
names(object@predictors)[which(names(object@predictors) == "PPT_00_09")] <- "AvgPPT00_09"
names(object@predictors)[which(names(object@predictors) == "LogWSA")] <- "Log_Area"
names(object@predictors)[which(names(object@predictors) == "SITE_ELEV")] <-  "AvgOfElevation"
Pc=0.5
object@predictors <- merge(unique(object@oesubsample[, c("StationCode", "SampleID")]), object@predictors,
by="StationCode")
row.names(object@predictors) <- paste(object@predictors$StationCode, "%", object@predictors$SampleID,
sep="")
iterate <- function(rep){
patable <- dcast(object@oesubsample[, c("StationCode", "SampleID", "STE", rep)],
StationCode + SampleID ~ STE, value.var=rep, mean)
patable[is.na(patable)] <- 0
row.names(patable) <- paste(patable$StationCode, "%", patable$SampleID, sep="")
iresult <- model.predict.RanFor.4.2(object@bugcal.pa, object@grps.final, object@preds.final, object@rf.mod, prednew=object@predictors,
bugnew=patable,Pc,Cal.OOB=FALSE)
iresult$SampleID <- unique(patable$SampleID)
return(iresult)
}
object@fulliterations <- lapply(paste("Replicate", 1:20), function(i)iterate(i))
labels <- strsplit(row.names(object@fulliterations[[1]]), "%")
labels <- as.data.frame(matrix(unlist(labels), nrow=length(labels), byrow=T))
object@fulliterations <- lapply(object@fulliterations, function(l)row.names(l)<-labels[, 2])
object@iterations <- do.call(cbind, lapply(object@fulliterations, function(l)l$OverE))
object@oeresults <- data.frame(labels, apply(object@iterations, 1, mean))
names(object@oeresults) <- c("StationCode", "SampleID", "OoverE")
object
})
test2 <- score(test1)
setMethod("randomForest", "oe", function(object){
if(nrow(object@oesubsample)==0){object <- subsample(object)}
names(object@predictors)[which(names(object@predictors) == "TEMP_00_09")] <- "AvgTemp00_09"
names(object@predictors)[which(names(object@predictors) == "PPT_00_09")] <- "AvgPPT00_09"
names(object@predictors)[which(names(object@predictors) == "LogWSA")] <- "Log_Area"
names(object@predictors)[which(names(object@predictors) == "SITE_ELEV")] <-  "AvgOfElevation"
Pc=0.5
object@predictors <- merge(unique(object@oesubsample[, c("StationCode", "SampleID")]), object@predictors,
by="StationCode")
row.names(object@predictors) <- paste(object@predictors$StationCode, "%", object@predictors$SampleID,
sep="")
iterate <- function(rep){
patable <- dcast(object@oesubsample[, c("StationCode", "SampleID", "STE", rep)],
StationCode + SampleID ~ STE, value.var=rep, mean)
patable[is.na(patable)] <- 0
row.names(patable) <- paste(patable$StationCode, "%", patable$SampleID, sep="")
iresult <- model.predict.RanFor.4.2(object@bugcal.pa, object@grps.final, object@preds.final, object@rf.mod, prednew=object@predictors,
bugnew=patable,Pc,Cal.OOB=FALSE)
iresult$SampleID <- unique(patable$SampleID)
return(iresult)
}
object@fulliterations <- lapply(paste("Replicate", 1:20), function(i)iterate(i))
labels <- strsplit(row.names(object@fulliterations[[1]]), "%")
labels <- as.data.frame(matrix(unlist(labels), nrow=length(labels), byrow=T))
object@fulliterations <- lapply(object@fulliterations, function(l)row.names(l)<-labels[, 2])
print(str(object@fulliterations[[1]]))
object@iterations <- do.call(cbind, lapply(object@fulliterations, function(l)l$OverE))
object@oeresults <- data.frame(labels, apply(object@iterations, 1, mean))
names(object@oeresults) <- c("StationCode", "SampleID", "OoverE")
object
})
test2 <- score(test1)
setMethod("randomForest", "oe", function(object){
if(nrow(object@oesubsample)==0){object <- subsample(object)}
names(object@predictors)[which(names(object@predictors) == "TEMP_00_09")] <- "AvgTemp00_09"
names(object@predictors)[which(names(object@predictors) == "PPT_00_09")] <- "AvgPPT00_09"
names(object@predictors)[which(names(object@predictors) == "LogWSA")] <- "Log_Area"
names(object@predictors)[which(names(object@predictors) == "SITE_ELEV")] <-  "AvgOfElevation"
Pc=0.5
object@predictors <- merge(unique(object@oesubsample[, c("StationCode", "SampleID")]), object@predictors,
by="StationCode")
row.names(object@predictors) <- paste(object@predictors$StationCode, "%", object@predictors$SampleID,
sep="")
iterate <- function(rep){
patable <- dcast(object@oesubsample[, c("StationCode", "SampleID", "STE", rep)],
StationCode + SampleID ~ STE, value.var=rep, mean)
patable[is.na(patable)] <- 0
row.names(patable) <- paste(patable$StationCode, "%", patable$SampleID, sep="")
iresult <- model.predict.RanFor.4.2(object@bugcal.pa, object@grps.final, object@preds.final, object@rf.mod, prednew=object@predictors,
bugnew=patable,Pc,Cal.OOB=FALSE)
iresult$SampleID <- unique(patable$SampleID)
return(iresult)
}
object@fulliterations <- lapply(paste("Replicate", 1:20), function(i)iterate(i))
labels <- strsplit(row.names(object@fulliterations[[1]]), "%")
labels <- as.data.frame(matrix(unlist(labels), nrow=length(labels), byrow=T))
object@fulliterations <- lapply(object@fulliterations, function(l){
row.names(l)<-labels[, 2]
l
})
print(str(object@fulliterations[[1]]))
object@iterations <- do.call(cbind, lapply(object@fulliterations, function(l)l$OverE))
object@oeresults <- data.frame(labels, apply(object@iterations, 1, mean))
names(object@oeresults) <- c("StationCode", "SampleID", "OoverE")
object
})
test2 <- score(test1)
setMethod("randomForest", "oe", function(object){
if(nrow(object@oesubsample)==0){object <- subsample(object)}
names(object@predictors)[which(names(object@predictors) == "TEMP_00_09")] <- "AvgTemp00_09"
names(object@predictors)[which(names(object@predictors) == "PPT_00_09")] <- "AvgPPT00_09"
names(object@predictors)[which(names(object@predictors) == "LogWSA")] <- "Log_Area"
names(object@predictors)[which(names(object@predictors) == "SITE_ELEV")] <-  "AvgOfElevation"
Pc=0.5
object@predictors <- merge(unique(object@oesubsample[, c("StationCode", "SampleID")]), object@predictors,
by="StationCode")
row.names(object@predictors) <- paste(object@predictors$StationCode, "%", object@predictors$SampleID,
sep="")
iterate <- function(rep){
patable <- dcast(object@oesubsample[, c("StationCode", "SampleID", "STE", rep)],
StationCode + SampleID ~ STE, value.var=rep, mean)
patable[is.na(patable)] <- 0
row.names(patable) <- paste(patable$StationCode, "%", patable$SampleID, sep="")
iresult <- model.predict.RanFor.4.2(object@bugcal.pa, object@grps.final, object@preds.final, object@rf.mod, prednew=object@predictors,
bugnew=patable,Pc,Cal.OOB=FALSE)
iresult$SampleID <- unique(patable$SampleID)
return(iresult)
}
object@fulliterations <- lapply(paste("Replicate", 1:20), function(i)iterate(i))
labels <- strsplit(row.names(object@fulliterations[[1]]), "%")
labels <- as.data.frame(matrix(unlist(labels), nrow=length(labels), byrow=T))
object@fulliterations <- lapply(object@fulliterations, function(l){
row.names(l)<-labels[, 2]
l
})
object@iterations <- do.call(cbind, lapply(object@fulliterations, function(l)l$OoverE))
object@oeresults <- data.frame(labels, apply(object@iterations, 1, mean))
names(object@oeresults) <- c("StationCode", "SampleID", "OoverE")
object
})
test2 <- score(test1)
View(summary(test2))
test2 <- oeresults
test2 <- score(test1)
oeresults <- test2
oe.results.table <- summary(oeresults)
View(oe.results.table)
setClass("metric.mean", contains=c("mmi", "oe"))
metric.mean
metric.mean()
getSlots(metric.mean)
getSlots("metric.mean")
library(randomForest)
library(plyr)
library(doParallel)
library(vegan)
library(ggmap)
library(reshape2)
load("data/FinalForests.Rdata")
load("data/ibiv4.RData")
load("data/taxonomy_v5.RData")
load("data/Metrics.Max.Min.Rdata")
load("data/otu_crosswalk.rdata")
load("data/OE.RF.Model.Rdata")
source("r/model.predict.RanFor.4.2.r")
###Setup###
min <- c(Number_Coleoptera_Taxa.min.met, Number_Diptera_Taxa.min.met, Number_Scraper_Taxa.min.met,
Number_Predator_Taxa.min.met, Number_CF___CG_Taxa.min.met, Number_ShredderTaxa.min.met,
Percent_Intolerant_Taxa__0_2_.min.met, Percent_Non_Insecta_Taxa.min.met,
Tolerance_Value.min.met
)
max <- c(Number_Coleoptera_Taxa.max.met, Number_Diptera_Taxa.max.met, Number_Scraper_Taxa.max.met,
Number_Predator_Taxa.max.met, Number_CF___CG_Taxa.max.met, Number_ShredderTaxa.max.met,
Percent_Intolerant_Taxa__0_2_.max.met, Percent_Non_Insecta_Taxa.max.met,
Tolerance_Value.max.met
)
maxminlabels <- c("coleoptera", "diptera", "scraper", "predator", "cfcg", "shredder",
"intolerant", "noninsect", "tolerance")
maxmin <- data.frame(maxminlabels, max, min)
taxonomy <- idata.frame(taxonomy_v5)
ibi <- idata.frame(ibiv4)
setOldClass("randomForest.formula")
setOldClass("idf")
###Class Definition###
setClass("bugs", representation(bugdata="data.frame",
predictors="data.frame"))
setClass("mmi", representation(taxonomy = "idf",
ibi = "idf",
cf.randomForest = "randomForest.formula",
coleoptera.randomForest = "randomForest.formula",
predator.randomForest = "randomForest.formula",
scraper.randomForest = "randomForest.formula",
shredder.randomForest = "randomForest.formula",
intolerant.randomForest = "randomForest.formula",
noninsect.randomForest = "randomForest.formula",
tolerance.randomForest = "randomForest.formula",
subsample = "data.frame",
metrics = "data.frame",
modelprediction = "data.frame",
maxmin = "data.frame",
result = "data.frame",
finalscore = "data.frame",
datalength = "numeric"),
contains="bugs",
prototype = list(ibi = ibi,
taxonomy = taxonomy,
cf.randomForest = Number_CF___CG_Taxa.FinalForest,
coleoptera.randomForest = Number_Coleoptera_Taxa.FinalForest,
predator.randomForest = Number_Predator_Taxa.FinalForest,
scraper.randomForest = Number_Scraper_Taxa.FinalForest,
shredder.randomForest = Number_ShredderTaxa.FinalForest,
intolerant.randomForest = Percent_Intolerant_Taxa__0_2_.FinalForest,
noninsect.randomForest = Percent_Non_Insecta_Taxa.FinalForest,
tolerance.randomForest = Tolerance_Value.FinalForest,
subsample = data.frame(),
metrics = data.frame(),
residuals = data.frame(),
maxmin = maxmin,
result = data.frame(),
finalscore = data.frame(),
datalength = numeric()
)
)
setClass("oe", representation(otu_crosswalk="data.frame",
ambiguous="data.frame",
oesubsample="data.frame",
iterations="matrix",
fulliterations="list",
datalength="numeric",
rf.mod="randomForest.formula",
preds.final="character",
grps.final="integer",
bugcal.pa="data.frame",
oeresults="data.frame"),
contains="bugs",
prototype=list(otu_crosswalk=otu_crosswalk,
ambiguous=data.frame(),
oesubsample=data.frame(),
datalength=numeric(),
iterations=matrix(),
fulliterations=list(),
datalength=numeric(),
rf.mod=rf.mod,
preds.final=preds.final,
grps.final=grps.final,
bugcal.pa=bugcal.pa,
oeresults=data.frame()
))
setClass("metric.mean", representation(mean.metric="data.frame"),
contains=c("mmi", "oe"))
getSlots("metric.mean")
