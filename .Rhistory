getDoParWorkers()
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
oeresults <- score(oe_data)
traceback()
getDoParWorkers()
closeAllConnections()
getDoParWorkers()
getDoParWorkers()
source('P:/PartTimers/MarkEngeln/bug_mmi/r/classes.r', echo=TRUE)
oeresults <- score(oe_data)
oe.results.table <- summary(oeresults)
View(oe.results.table)
setMethod("initialize", "metric.mean", function(.Object="metric.mean", x="mmi", y="oe"){
for(i in names(getSlots("mmi"))){
.Object@i <- x@i
}
for(i in names(getSlots("oe"))){
.Object@i <- y@i
}
.Object@mean.metric <- merge(y@oeresults, x@summary[, 1:3])
.Object@mean.metric$mean <- apply(.Object@mean.metric[, c("OoverE", "MMI Score")], 1, mean)
.Object
})
mean <- new("metric.mean", mmiresults, oeresults)
mean <- new("metric.mean", x=mmiresults, y=oeresults)
setMethod("initialize", "metric.mean", function(.Object="metric.mean", x="mmi", y="oe"){
for(i in names(getSlots("mmi"))){
.Object@as.character(i) <- x@as.character(i)
}
for(i in names(getSlots("oe"))){
.Object@as.character(i) <- y@as.character(i)
}
.Object@mean.metric <- merge(y@oeresults, x@summary[, 1:3])
.Object@mean.metric$mean <- apply(.Object@mean.metric[, c("OoverE", "MMI Score")], 1, mean)
.Object
})
mean <- new("metric.mean", x=mmiresults, y=oeresults)
setMethod("initialize", "metric.mean", function(.Object="metric.mean", x="mmi", y="oe"){
for(i in names(getSlots("mmi"))){
print(i)
.Object@as.character(i) <- x@as.character(i)
}
for(i in names(getSlots("oe"))){
.Object@as.character(i) <- y@as.character(i)
}
.Object@mean.metric <- merge(y@oeresults, x@summary[, 1:3])
.Object@mean.metric$mean <- apply(.Object@mean.metric[, c("OoverE", "MMI Score")], 1, mean)
.Object
})
mean <- new("metric.mean", x=mmiresults, y=oeresults)
?as.expression
setMethod("initialize", "metric.mean", function(.Object="metric.mean", x="mmi", y="oe"){
for(i in names(getSlots("mmi"))){
slot(.Object, i) <- slot(x, i)
}
for(i in names(getSlots("oe"))){
slot(.Object, i) <- slot(y, i)
}
.Object@mean.metric <- merge(y@oeresults, x@summary[, 1:3])
.Object@mean.metric$mean <- apply(.Object@mean.metric[, c("OoverE", "MMI Score")], 1, mean)
.Object
})
mean <- new("metric.mean", x=mmiresults, y=oeresults)
for(i in names(getSlots("mmi"))){
View(mean@mean.metric)
setMethod("mean", c("mmi", "oe"), function(mmi="mmi", oe="oe"){
new("metric.mean", mmi, oe)
})
setGeneric("mean", function(mmi="mmi", oe="oe")
standardGeneric("mean"))
setMethod("mean", c("mmi", "oe"), function(mmi="mmi", oe="oe"){
new("metric.mean", mmi, oe)
})
mean <- mean(mmiresults, oeresults)
View(mean@mean.metric)
?mean
getMethods("mean")
source('~/.active-rstudio-document', echo=TRUE)
traceback()
source('P:/PartTimers/MarkEngeln/bug_mmi/r/classes.r', echo=TRUE)
traceback()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
mean <- mean(mmiresults, oeresults)
mmiresults
oeresults
traceback()
mean <- mean(mmiresults, oeresults)
mean <- new("metric.mean", x=mmiresults, y=oeresults)
setMethod("summary", "metric.mean", function(object = "metric.mean"){
object@mean.metric
})
mean.table <- summary(mean)
View(mean.table)
setMethod("summary", "metric.mean", function(object = "metric.mean", report="basic"){
object@mean.metric
})
mmiresults@bugdata
names(mmiresults@bugdata)
names(oeresults@bugdata)
names(oeresults@oesubsample)
names(oeresults@ambiguous)
?ifelse
mean@ambiguous
setMethod("summary", "metric.mean", function(object = "metric.mean", report="basic"){
if(report == "basic"){
object@mean.metric$Count <- ddply(object@bugdata, "SampleID", function(df)sum(df$Result))
object@mean.metric$Pcnt_Ambiguous_Individuals <- object@ambiguous$individuals
object@mean.metric$Ambiguous_Taxa <- object@ambiguous$taxa
object@mean.metric$flag <- ifelse(object@mean.metric$Count >=500 & object@mean.metric$Pcnt_Ambiguous_Individuals < 20,
"Adequate", "Inadequate")
object[, c(1:2, 6:9, 3:5)]
})
c(1:2, 6:9, 3:5)
c(1:2, 6:9, 3:5)
setMethod("summary", "metric.mean", function(object = "metric.mean", report="basic"){
if(report == "basic"){
object@mean.metric$Count <- ddply(object@bugdata, "SampleID", function(df)sum(df$Result))
object@mean.metric$Pcnt_Ambiguous_Individuals <- object@ambiguous$individuals
object@mean.metric$Ambiguous_Taxa <- object@ambiguous$taxa
object@mean.metric$flag <- ifelse(object@mean.metric$Count >=500 & object@mean.metric$Pcnt_Ambiguous_Individuals < 20,
"Adequate", "Inadequate")
object[, c(1:2, 6:9, 3:5)]
}
})
mean.table <- summary(mean)
setMethod("summary", "metric.mean", function(object = "metric.mean", report="basic"){
if(report == "basic"){
object@mean.metric$Count <- ddply(object@bugdata, "SampleID", function(df)sum(df$Result))
object@mean.metric$Pcnt_Ambiguous_Individuals <- object@ambiguous$individuals
object@mean.metric$Ambiguous_Taxa <- object@ambiguous$taxa
object@mean.metric$flag <- ifelse(object@mean.metric$Count >=500 & object@mean.metric$Pcnt_Ambiguous_Individuals < 20,
"Adequate", "Inadequate")
object@mean.metric[, c(1:2, 6:9, 3:5)]
}
})
mean.table <- summary(mean)
View(mean.table)
setMethod("summary", "metric.mean", function(object = "metric.mean", report="basic"){
if(report == "basic"){
object@mean.metric$Count <- ddply(object@bugdata, "SampleID", function(df)sum(df$Result))[, 2]
object@mean.metric$Pcnt_Ambiguous_Individuals <- object@ambiguous$individuals
object@mean.metric$Ambiguous_Taxa <- object@ambiguous$taxa
object@mean.metric$flag <- ifelse(object@mean.metric$Count >=500 & object@mean.metric$Pcnt_Ambiguous_Individuals < 20,
"Adequate", "Inadequate")
object@mean.metric[, c(1:2, 6:9, 3:5)]
}
})
mean.table <- summary(mean)
View(mean.table)
setMethod("summary", "metric.mean", function(object = "metric.mean", report="basic"){
if(report == "basic"){
object@mean.metric$Count <- ddply(object@bugdata, "SampleID", function(df)sum(df$Result))[, 2]
object@mean.metric$Pcnt_Ambiguous_Individuals <- object@ambiguous$individuals
object@mean.metric$Num_Ambiguous_Taxa <- object@ambiguous$taxa
object@mean.metric$flag <- ifelse(object@mean.metric$Count >=500 & object@mean.metric$Pcnt_Ambiguous_Individuals < 20,
"Adequate", "Inadequate")
object@mean.metric <- object@mean.metric[, c(1:2, 6:9, 3:5)]
object@mean.metric
}
})
setMethod("summary", "metric.mean", function(object = "metric.mean", report="basic"){
if(report == "basic"){
object@mean.metric$Count <- ddply(object@bugdata, "SampleID", function(df)sum(df$Result))[, 2]
object@mean.metric$Pcnt_Ambiguous_Individuals <- object@ambiguous$individuals
object@mean.metric$Num_Ambiguous_Taxa <- object@ambiguous$taxa
object@mean.metric$flag <- ifelse(object@mean.metric$Count >=450 & object@mean.metric$Pcnt_Ambiguous_Individuals < 20,
"Adequate", "Inadequate")
object@mean.metric <- object@mean.metric[, c(1:2, 6:9, 3:5)]
object@mean.metric
}
})
mean.table <- summary(mean)
View(mean.table)
?error
?stop
View(mean.table)
setMethod("summary", "metric.mean", function(object = "metric.mean", report="basic"){
if(report %in% c("basic", "standard", "detailed", "complete")){
object@mean.metric$Count <- ddply(object@bugdata, "SampleID", function(df)sum(df$Result))[, 2]
object@mean.metric$Pcnt_Ambiguous_Individuals <- object@ambiguous$individuals
object@mean.metric$Num_Ambiguous_Taxa <- object@ambiguous$taxa
object@mean.metric$flag <- ifelse(object@mean.metric$Count >=450 & object@mean.metric$Pcnt_Ambiguous_Individuals < 20,
"Adequate", "Inadequate")
object@mean.metric <- object@mean.metric[, c(1:2, 6:9, 3:5)]
}
if(report %in% c("standard", "detailed", "complete")){
object@mean.metric$mmi_flag <- ifelse(object@mean.metric$Count >=450, "Adequate", "Inadequate")
object@mean.metric$ambig_count_flag <- ifelse(object@mean.metric$Pcnt_Ambiguous_Individuals < 20, "Adequate", "Inadequate")
object@mean.metric$ambig_taxa_flag <- ifelse(object@mean.metric$Num_Ambiguous_Taxa < 25, "Adequate", "Inadequate")
object@mean.metric <- object@mean.metric[, c(1:6, 10:12, 7:9)]
}
if(!(report %in% c("basic", "standard", "detailed", "complete")){
stop("Allowed values for 'report': "basic", "standard", "detailed", "Complete"")
} else
object@mean.metric
})
setMethod("summary", "metric.mean", function(object = "metric.mean", report="basic"){
if(report %in% c("basic", "standard", "detailed", "complete")){
object@mean.metric$Count <- ddply(object@bugdata, "SampleID", function(df)sum(df$Result))[, 2]
object@mean.metric$Pcnt_Ambiguous_Individuals <- object@ambiguous$individuals
object@mean.metric$Num_Ambiguous_Taxa <- object@ambiguous$taxa
object@mean.metric$flag <- ifelse(object@mean.metric$Count >=450 & object@mean.metric$Pcnt_Ambiguous_Individuals < 20,
"Adequate", "Inadequate")
object@mean.metric <- object@mean.metric[, c(1:2, 6:9, 3:5)]
}
if(report %in% c("standard", "detailed", "complete")){
object@mean.metric$mmi_flag <- ifelse(object@mean.metric$Count >=450, "Adequate", "Inadequate")
object@mean.metric$ambig_count_flag <- ifelse(object@mean.metric$Pcnt_Ambiguous_Individuals < 20, "Adequate", "Inadequate")
object@mean.metric$ambig_taxa_flag <- ifelse(object@mean.metric$Num_Ambiguous_Taxa < 25, "Adequate", "Inadequate")
object@mean.metric <- object@mean.metric[, c(1:6, 10:12, 7:9)]
}
if(!(report %in% c("basic", "standard", "detailed", "complete"))){
stop("Allowed values for 'report': "basic", "standard", "detailed", "Complete"")
} else
object@mean.metric
})
setMethod("summary", "metric.mean", function(object = "metric.mean", report="basic"){
if(report %in% c("basic", "standard", "detailed", "complete")){
object@mean.metric$Count <- ddply(object@bugdata, "SampleID", function(df)sum(df$Result))[, 2]
object@mean.metric$Pcnt_Ambiguous_Individuals <- object@ambiguous$individuals
object@mean.metric$Num_Ambiguous_Taxa <- object@ambiguous$taxa
object@mean.metric$flag <- ifelse(object@mean.metric$Count >=450 & object@mean.metric$Pcnt_Ambiguous_Individuals < 20,
"Adequate", "Inadequate")
object@mean.metric <- object@mean.metric[, c(1:2, 6:9, 3:5)]
}
if(report %in% c("standard", "detailed", "complete")){
object@mean.metric$mmi_flag <- ifelse(object@mean.metric$Count >=450, "Adequate", "Inadequate")
object@mean.metric$ambig_count_flag <- ifelse(object@mean.metric$Pcnt_Ambiguous_Individuals < 20, "Adequate", "Inadequate")
object@mean.metric$ambig_taxa_flag <- ifelse(object@mean.metric$Num_Ambiguous_Taxa < 25, "Adequate", "Inadequate")
object@mean.metric <- object@mean.metric[, c(1:6, 10:12, 7:9)]
}
if(!(report %in% c("basic", "standard", "detailed", "complete"))){
stop("Allowed values for report: 'basic', 'standard', 'detailed', 'Complete'")
} else
object@mean.metric
})
test1 <- summary(mean, report="standard")
View(test1)
nams(mean@metrics)
names(mean@metrics)
names(mean@result)
names(mean@modelprediction)
object@mean.metric <- cbind(object@mean.metric, object@result, object@modelprediction[2:9])
setMethod("summary", "metric.mean", function(object = "metric.mean", report="basic"){
if(report %in% c("basic", "standard", "detailed")){
object@mean.metric$Count <- ddply(object@bugdata, "SampleID", function(df)sum(df$Result))[, 2]
object@mean.metric$Pcnt_Ambiguous_Individuals <- object@ambiguous$individuals
object@mean.metric$Num_Ambiguous_Taxa <- object@ambiguous$taxa
object@mean.metric$flag <- ifelse(object@mean.metric$Count >=450 & object@mean.metric$Pcnt_Ambiguous_Individuals < 20,
"Adequate", "Inadequate")
object@mean.metric <- object@mean.metric[, c(1:2, 6:9, 3:5)]
}
if(report %in% c("standard", "detailed")){
object@mean.metric$mmi_flag <- ifelse(object@mean.metric$Count >=450, "Adequate", "Inadequate")
object@mean.metric$ambig_count_flag <- ifelse(object@mean.metric$Pcnt_Ambiguous_Individuals < 20, "Adequate", "Inadequate")
object@mean.metric$ambig_taxa_flag <- ifelse(object@mean.metric$Num_Ambiguous_Taxa < 25, "Adequate", "Inadequate")
object@mean.metric <- object@mean.metric[, c(1:6, 10:12, 7:9)]
}
if(report == "detailed"{
names(object@result)[1:9] <- paste(names(object@result), "_", "metric", sep="")
names(object@modelprediction) <- paste(names(object@modelprediction), "_", "predicted_metric", sep="")
object@mean.metric <- cbind(object@mean.metric, object@result, object@modelprediction[2:9])
}
if(!(report %in% c("basic", "standard", "detailed", "complete"))){
stop("Allowed values for report: 'basic', 'standard', 'detailed'")
} else
object@mean.metric
})
setMethod("summary", "metric.mean", function(object = "metric.mean", report="basic"){
if(report %in% c("basic", "standard", "detailed")){
object@mean.metric$Count <- ddply(object@bugdata, "SampleID", function(df)sum(df$Result))[, 2]
object@mean.metric$Pcnt_Ambiguous_Individuals <- object@ambiguous$individuals
object@mean.metric$Num_Ambiguous_Taxa <- object@ambiguous$taxa
object@mean.metric$flag <- ifelse(object@mean.metric$Count >=450 & object@mean.metric$Pcnt_Ambiguous_Individuals < 20,
"Adequate", "Inadequate")
object@mean.metric <- object@mean.metric[, c(1:2, 6:9, 3:5)]
}
if(report %in% c("standard", "detailed")){
object@mean.metric$mmi_flag <- ifelse(object@mean.metric$Count >=450, "Adequate", "Inadequate")
object@mean.metric$ambig_count_flag <- ifelse(object@mean.metric$Pcnt_Ambiguous_Individuals < 20, "Adequate", "Inadequate")
object@mean.metric$ambig_taxa_flag <- ifelse(object@mean.metric$Num_Ambiguous_Taxa < 25, "Adequate", "Inadequate")
object@mean.metric <- object@mean.metric[, c(1:6, 10:12, 7:9)]
}
if(report == "detailed"){
names(object@result)[1:9] <- paste(names(object@result), "_", "metric", sep="")
names(object@modelprediction) <- paste(names(object@modelprediction), "_", "predicted_metric", sep="")
object@mean.metric <- cbind(object@mean.metric, object@result, object@modelprediction[2:9])
}
if(!(report %in% c("basic", "standard", "detailed", "complete"))){
stop("Allowed values for report: 'basic', 'standard', 'detailed'")
} else
object@mean.metric
})
test1 <- summary(mean, report="detailed")
paste(names(mean@result), "_", "metric", sep="")
setMethod("summary", "metric.mean", function(object = "metric.mean", report="basic"){
if(report %in% c("basic", "standard", "detailed")){
object@mean.metric$Count <- ddply(object@bugdata, "SampleID", function(df)sum(df$Result))[, 2]
object@mean.metric$Pcnt_Ambiguous_Individuals <- object@ambiguous$individuals
object@mean.metric$Num_Ambiguous_Taxa <- object@ambiguous$taxa
object@mean.metric$flag <- ifelse(object@mean.metric$Count >=450 & object@mean.metric$Pcnt_Ambiguous_Individuals < 20,
"Adequate", "Inadequate")
object@mean.metric <- object@mean.metric[, c(1:2, 6:9, 3:5)]
}
if(report %in% c("standard", "detailed")){
object@mean.metric$mmi_flag <- ifelse(object@mean.metric$Count >=450, "Adequate", "Inadequate")
object@mean.metric$ambig_count_flag <- ifelse(object@mean.metric$Pcnt_Ambiguous_Individuals < 20, "Adequate", "Inadequate")
object@mean.metric$ambig_taxa_flag <- ifelse(object@mean.metric$Num_Ambiguous_Taxa < 25, "Adequate", "Inadequate")
object@mean.metric <- object@mean.metric[, c(1:6, 10:12, 7:9)]
}
if(report == "detailed"){
names(object@result)[1:9] <- paste(names(object@result)[1:9], "_", "metric", sep="")
names(object@modelprediction) <- paste(names(object@modelprediction), "_", "predicted_metric", sep="")
object@mean.metric <- cbind(object@mean.metric, object@result, object@modelprediction[2:9])
}
if(!(report %in% c("basic", "standard", "detailed", "complete"))){
stop("Allowed values for report: 'basic', 'standard', 'detailed'")
} else
object@mean.metric
})
test1 <- summary(mean, report="detailed")
View(test1)
names(mean)
getSlots(mean)
names(mean@oeresults)
names(mean@iterations)
names(mean@fulliterations)
names(mean@fulliterations[[1]])
(mean@iterations)
mean@fulliterations[[1]]
setMethod("summary", "metric.mean", function(object = "metric.mean", report="basic"){
if(report %in% c("basic", "standard", "detailed")){
object@mean.metric$Count <- ddply(object@bugdata, "SampleID", function(df)sum(df$Result))[, 2]
object@mean.metric$Pcnt_Ambiguous_Individuals <- object@ambiguous$individuals
object@mean.metric$Num_Ambiguous_Taxa <- object@ambiguous$taxa
object@mean.metric$flag <- ifelse(object@mean.metric$Count >=450 & object@mean.metric$Pcnt_Ambiguous_Individuals < 20,
"Adequate", "Inadequate")
object@mean.metric <- object@mean.metric[, c(1:2, 6:9, 3:5)]
}
if(report %in% c("standard", "detailed")){
object@mean.metric$mmi_flag <- ifelse(object@mean.metric$Count >=450, "Adequate", "Inadequate")
object@mean.metric$ambig_count_flag <- ifelse(object@mean.metric$Pcnt_Ambiguous_Individuals < 20, "Adequate", "Inadequate")
object@mean.metric$ambig_taxa_flag <- ifelse(object@mean.metric$Num_Ambiguous_Taxa < 25, "Adequate", "Inadequate")
object@mean.metric <- object@mean.metric[, c(1:6, 10:12, 7:9)]
}
if(report == "detailed"){
names(object@result)[1:9] <- paste(names(object@result)[1:9], "_", "metric", sep="")
names(object@modelprediction) <- paste(names(object@modelprediction), "_", "predicted_metric", sep="")
object@mean.metric <- cbind(object@mean.metric, object@result, object@modelprediction[2:9])
object@mean.metric$Expected_taxon_prob <- apply(do.call(cbind, lapply(object@fulliterations, function(l)l$E)), 1, mean)
object@mean.metric$Observed_taxa <- apply(do.call(cbind, lapply(object@fulliterations, function(l)l$O)), 1, mean)
}
if(!(report %in% c("basic", "standard", "detailed", "complete"))){
stop("Allowed values for report: 'basic', 'standard', 'detailed'")
} else
object@mean.metric
})
test1 <- summary(mean, report="detailed")
View(test1)
13.784549/14.05
14.05/13.784549
setMethod("summary", "metric.mean", function(object = "metric.mean", report="basic"){
if(report %in% c("basic", "standard", "detailed")){
object@mean.metric$Count <- ddply(object@bugdata, "SampleID", function(df)sum(df$Result))[, 2]
object@mean.metric$Pcnt_Ambiguous_Individuals <- object@ambiguous$individuals
object@mean.metric$Num_Ambiguous_Taxa <- object@ambiguous$taxa
object@mean.metric$flag <- ifelse(object@mean.metric$Count >=450 & object@mean.metric$Pcnt_Ambiguous_Individuals < 20,
"Adequate", "Inadequate")
object@mean.metric <- object@mean.metric[, c(1:2, 6:9, 3:5)]
}
if(report %in% c("standard", "detailed")){
object@mean.metric$mmi_flag <- ifelse(object@mean.metric$Count >=450, "Adequate", "Inadequate")
object@mean.metric$ambig_count_flag <- ifelse(object@mean.metric$Pcnt_Ambiguous_Individuals < 20, "Adequate", "Inadequate")
object@mean.metric$ambig_taxa_flag <- ifelse(object@mean.metric$Num_Ambiguous_Taxa < 25, "Adequate", "Inadequate")
object@mean.metric <- object@mean.metric[, c(1:6, 10:12, 7:9)]
}
if(report == "detailed"){
names(object@result)[1:9] <- paste(names(object@result)[1:9], "_", "metric", sep="")
names(object@modelprediction) <- paste(names(object@modelprediction), "_", "predicted_metric", sep="")
object@mean.metric <- cbind(object@mean.metric, object@result, object@modelprediction[2:9])
object@mean.metric$Expected_capture <- apply(do.call(cbind, lapply(object@fulliterations, function(l)l$E)), 1, mean)
object@mean.metric$Observed_taxa <- apply(do.call(cbind, lapply(object@fulliterations, function(l)l$O)), 1, mean)
}
if(!(report %in% c("basic", "standard", "detailed", "complete"))){
stop("Allowed values for report: 'basic', 'standard', 'detailed'")
} else
object@mean.metric
})
source('P:/PartTimers/MarkEngeln/bug_mmi/r/classes.r')
test1 <- summary(mean, report="detailed")
View(test1)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/classes.r', echo=TRUE)
mean <- new("metric.mean", x=mmiresults, y=oeresults)
mean.table <- summary(mean)
View(mean.table)
mean.table <- summary(mean, report="detailed")
View(mean.table)
setMethod("plot", "metric.mean", function(x="metric.mean"){
load("data/base_map.rdata")
x@mean.metric$HybridScore <- cut(x@Hybrid[, 2], breaks=c(0, .3, .8, 1.5), labels=c("low", "medium", "high"))
hscore <- cbind(x@mean.metric$HybridScore, x@predictors[, 1:4])
ggmap(base_map) +
geom_point(data=hscore, aes(x=New_Long, y=New_Lat, colour=HybridScore), size=4, alpha=.6)
})
plot(mean)
setMethod("plot", "metric.mean", function(x="metric.mean"){
load("data/base_map.rdata")
x@mean.metric$HybridScore <- cut(x@mean.metric$Hybrid, breaks=c(0, .3, .8, 1.5), labels=c("low", "medium", "high"))
hscore <- cbind(x@mean.metric$HybridScore, x@predictors[, 1:4])
ggmap(base_map) +
geom_point(data=hscore, aes(x=New_Long, y=New_Lat, colour=HybridScore), size=4, alpha=.6)
})
plot(mean)
setMethod("plot", "metric.mean", function(x="metric.mean"){
load("data/base_map.rdata")
x@mean.metric$HybridScore <- cut(x@mean.metric$Hybrid, breaks=c(0, .3, .8, 1.5), labels=c("low", "medium", "high"))
hscore <- cbind(x@mean.metric$HybridScore, x@predictors[, 1:4])
print(names(hscore))
ggmap(base_map) +
geom_point(data=hscore, aes(x=New_Long, y=New_Lat, colour=HybridScore), size=4, alpha=.6)
})
plot(mean)
setMethod("plot", "metric.mean", function(x="metric.mean"){
load("data/base_map.rdata")
x@mean.metric$HybridScore <- cut(x@mean.metric$Hybrid, breaks=c(0, .3, .8, 1.5), labels=c("low", "medium", "high"))
hscore <- cbind(x@mean.metric$HybridScore, x@predictors[, 1:4])
names(hscore)[1] <- "HybridScore"
ggmap(base_map) +
geom_point(data=hscore, aes(x=New_Long, y=New_Lat, colour=HybridScore), size=4, alpha=.6)
})
plot(mean)
setMethod("plot", "metric.mean", function(x="metric.mean"){
load("data/base_map.rdata")
x@mean.metric$HybridScore <- cut(x@mean.metric$Hybrid, breaks=c(0, .4, .8, 1.5), labels=c("low", "medium", "high"))
hscore <- cbind(x@mean.metric$HybridScore, x@predictors[, 1:4])
names(hscore)[1] <- "HybridScore"
ggmap(base_map) +
geom_point(data=hscore, aes(x=New_Long, y=New_Lat, colour=HybridScore), size=4, alpha=.6)
})
plot(mean)
x@mean.metric$HybridScore <- cut(x@mean.metric$Hybrid, breaks=c(0, .4, .8, 1.5), labels=c("low", "medium", "high"))
View(do.call(cbind, mean@fulliterations))
View(mean@subsample)
View(mean@oesubsample)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/classes.r', echo=TRUE)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/classes.r', echo=TRUE)
datadump <- summary(mean, report="complete")
str(datadump)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
traceback()
source("r/classes.r")
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
library(vegan)
?metaMDS
library(nnet)
?nnet
library(neuralnet)
?package.skeleton
?neuralnet
?package.skeleton
package.skeleton(name="ireporting", list=ls(), path="/ireporting")
package.skeleton(name="ireporting", list=ls(), path="pkg")
package.skeleton(name="ireporting", list=ls(), path="pkg")
package.skeleton(name="ireporting", list=ls(), path="pkg", code_files="r/classes.r")
package.skeleton(name="ireporting", list=ls(), path="pkg", code_files="r/classes.r")
install.package("RSQLite")
install.packages("RSQLite")
library(RSQLite)
?dbConnect
dbConnect("SQLite", "mmi")
load("data/base_map.rdata")
con <- dbConnect("SQLite", "mmi")
?dbWriteTable
dbWriteTable(con, "ibi", ibiv4)
dbReadTable(con)
dbReadTable(con, "ibi")
View(dbReadTable(con, "ibi"))
?dbApply
?dbApply
closeAllConnections
closeAllConnections()
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
library(SQLite)
install.packages("SQLite")
library(RSQLite)
conn <- dbConnect("SQLite", bug_metadata)
conn <- dbConnect("SQLite", "bug_metadata")
View(pred)
grps.final
preds.final
dbWriteTable(conn, "ibi", ibiv4)
dbWriteTable(conn, "taxonomy", taxonomy_v5)
dbWriteTable(conn, "maxmin", maxmin)
dbWriteTable(conn, "otu_crosswalk", otu_crosswalk)
dbWriteTable(conn, "example_pred", pred)
dbWriteTable(conn, "example_bugs", bugs)
dbWriteTable(conn, "predcal", predcal)
dbWriteTable(conn, "grps_final", grps.final)
grps <- data.frame(grps.final)
dbWriteTable(conn, "grps_final", grps)
dbListTables(conn)
?dbSendQuery
dbSendQuery(conn, FROM grps GET *)
?dbSendQuery
dbSendQuery(conn, FROM grps SELECT *)
dbSendQuery(conn, SELECT * FROM grps)
dbSendQuery(conn, "SELECT * FROM grps")
dbListTables(conn)
dbSendQuery(conn, "SELECT * FROM grps_final")
dbClearResult()
dbGetQuery(conn, "SELECT * FROM grps_final")
