?load
require(gdata)
load("data/OE.RF.Model.Rdata", envir=forestsdb)
?ls
ls(envir=forestsdb)
tools:::makeLazyLoadDB(forestsdb, "forestsdb")
tools:::makeLazyLoadDB(forestsdb, "forestsdb")
forestsdb <- local({load("data/FinalForests.Rdata"); environment()})
ls(envir=forestsdb)
forestsdb("rf.mod") <- rf.mod
?local
forestsdb <- local({rfmod <- rf.mod}, envir=forestsdb)
ls(envir=forestsdb)
ls(envir="forestsdb")
ls(envir=forestsdb)
str)fprestsdb
str(fprestsdb)
str(forestsdb)
ls(envir=forestsdb)
?ls
ls(envir = forestsdb)
forestsdb <- local({load("data/FinalForests.Rdata"); environment()})
forestsdb <- local({load("data/FinalForests.Rdata"); rfmod <- rf.mod; environment()})
ls(envir = forestsdb)
forestsdb <- local({load("data/FinalForests.Rdata"); rf.mod <- rf.mod; environment()})
ls(envir = forestsdb)
tools:::makeLazyLoadDB(forestsdb, "forestsdb")
load("data/OE.RF.Model.Rdata")
forestsdb <- local({load("data/FinalForests.Rdata"); rf.mod <- rf.mod; environment()})
tools:::makeLazyLoadDB(forestsdb, "forestsdb")
library(RSQLite)
str(conn)
conn <- dbConnect("SQLite", "data/bug_metadata.db")
str(conn)
dbListTables(conn)
bugcal.pa
dbListTables(conn)
dbWriteTable(conn, "bugcal.pa", bugcal.pa)
dbWriteTable(conn, "bugcal_pa", bugcal_pa)
conn <- dbConnect("SQLite", "data/bug_metadata.db")
dbWriteTable(conn, "bugcal_pa", bugcal_pa)
dbWriteTable(conn, "bugcal_pa", bugcal.pa)
dbListTables(conn)
View(predcal)
dbGetQuery(conn, "DROP predcal")
dbGetQuery(conn, "DROP TABLE predcal")
dbListTables(conn)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
traceback()
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
traceback()
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
traceback()
str(dbGetQuery(conn, "SELECT * FROM taxonomy"))
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
unique(dbGetQuery(conn, "Select STE FROM ibi")$STE)
dbGetQuery(conn, "Select SAFIT1 FROM ibi")
which(is.na(dbGetQuery(conn, "Select SAFIT1 FROM ibi")))
dbGetQuery(conn, "Select SAFIT1 FROM ibi WHERE ibi.SAFIT1 == NA")
dbGetQuery(conn, "Select SAFIT1 FROM ibi WHERE ibi.SAFIT1 == 'NA")
dbGetQuery(conn, "Select SAFIT1 FROM ibi WHERE ibi.SAFIT1 == 'NA'")
dbGetQuery(conn, "Select SAFIT1 FROM ibi WHERE ibi.SAFIT1 == '<NA>'")
mindex <- which(is.na(dbGetQuery(conn, "Select SAFIT1 FROM ibi")))
mindex
dbListFields(conn, "ibi")
dbGetQuery(conn, "Select row_names FROM ibi")
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.row_names ==" mindex))
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.row_names ==", mindex))
mindex
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.row_names IN", mindex))
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.row_names == (", mindex, ")", ))
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.row_names IN (", mindex, ")", ))
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.row_names = (", mindex, ")", ))
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.row_names =", mindex ))
mindex
paste(mindex, ",")
paste(mindex, ",", collapse="")
paste(mindex, ", ", collapse="")
dbListFields(conn, "ibi")
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.CustomSTE = ''))
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.CustomSTE = ''"))
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.CustomSTE is NULL"))
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.CustomSTE = NULL"))
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.CustomSTE = null"))
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.CustomSTE is null"))
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.SAFIT1 is null"))
dbGetQuery(conn, paste("UPDATE ibi SET SAFIT1 = 'Missing' WHERE SAFIT1 is null"))
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.SAFIT1 is null"))
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
dbGetQuery(conn, "SELECT * FROM taxonomy")
dbGetQuery(conn, "SELECT * FROM taxonomy WHERE TaxonomicLevelName is null")
"Rhyacophila vedra" %in% bugs$FinalID
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
View(bugs)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
dbGetQuery(conn, paste("UPDATE ibi SET SAFIT1 = FinalID WHERE SAFIT1 is 'Missing'"))
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.SAFIT1 is 'Missing'"))
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.SAFIT1 = 'Missing'"))
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.SAFIT1 = Missing"))
dbGetQuery(conn, paste("Select * FROM ibi WHERE SAFIT1 = 'Missing'"))
dbGetQuery(conn, paste("Select * FROM ibi WHERE SAFIT1 = 'Missing'"))
dbGetQuery(conn, paste("Select * FROM ibi WHERE SAFIT1 is null))
dbGetQuery(conn, paste("Select * FROM ibi WHERE SAFIT1 is null"))
dbGetQuery(conn, paste("Select * FROM ibi WHERE CustomSTE is null"))
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
dbGetQuery(conn, paste("Select * FROM ibi WHERE FinalID is 'Dunella doddsi"))
dbGetQuery(conn, paste("Select * FROM ibi WHERE FinalID is 'Dunella doddsi'"))
ibi
dbGetQuery(conn, paste("Select * FROM ibi WHERE FinalID is 'Trichoptera'"))
dbListFields(conn, "ibi")
write.csv(dbGetQuery(conn, "SELECT * FROM ibi"), file="test.csv")
?read.csv
bugs <- read.csv("validation/bugs_mmi.csv", strip.white=T)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
library(RSQLite)
conn <- dbConnect("SQLite", "data/bug_metadata.db")
dbGetQuery(object@dbconn, "Select * FROM grps_final")
dbGetQuery(conn, "Select * FROM grps_final")
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
traceback()
dbGetQuery(conn, "Select * FROM grps_final")$grps_final
oeresults <- score(oe_data)
traceback()
bugspa1 <- dbGetQuery(conn, "Select * FROM bugcal_pa")
str(bugspa1)
row.names(bugspa1) <- bugspa1[, 1]
str(bugspa1)
View(bugspa1)
bugspa1 <- bugspa1[, 1:ncol(bugspa1)]
View(bugspa1)
source("r/classes.r")
oeresults <- score(oe_data)
oe.results.table <- summary(oeresults)
View(oe.results.table)
mean <- new("metric.mean", x=mmiresults, y=oeresults)
mean.table <- summary(mean, report="basic")
View(mean.table)
plot(mean)
s <- system.time()
s
s <- proc.time()
s
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
?warn
?warning
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
warnings()
traceback()
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
mmiresults <- score(mmi_data)
?paste
warning
?warning
source("r/classes.r")
mmiresults <- score(mmi_data)
source("r/classes.r")
mmiresults <- score(mmi_data)
source("r/classes.r")
mmi_data <- new("mmi", bugdata = bugs, predictors = pred)
mmiresults <- score(mmi_data)
?paste
source("r/classes.r")
mmiresults <- score(mmi_data)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
warnings()
warnigs()
warnings()
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
traceback()
?dcast
source("r/classes.r")
oeresults <- score(oe_data)
?cast
source("r/classes.r")
oeresults <- score(oe_data)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/classes.r', echo=TRUE)
oeresults <- score(oe_data)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/classes.r', echo=TRUE)
oeresults <- score(oe_data)
?.mean
source("r/classes.r")
oeresults <- score(oe_data)
oe.results.table <- summary(oeresults)
View(oe.results.table)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
?package.skeleton
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
package.skeleton(name="hybridindex", list=ls())
package.skeleton(name="hybridindex", code_files=c("r/classes.r", "r/model.predict.RanFor.4.2.r"))
?system.file
load("P:/PartTimers/MarkEngeln/bug_mmi/hybridindex/Data/base_map.rdata")
lazyLoad("data/forestsdb")
library(devtools)
?devtools
library(devtools)
getwd()
build("/hybridindex")
build("hybridindex/")
?build
build("hybridindex")
dev_mode()
install("hydridindex_1.0.tar.gz")
install.packages("hydridindex_1.0.tar.gz")
install.packages("hydridindex_1.0.tar.gz", repos=NULL)
getwd()
install.packages("hybridindex_1.0.tar.gz", repos=NULL)
install.packages("hybridindex_1.0.tar.gz", repos=NULL, type="binary")
dev_mode()
build("hydrixindex")
build("hybridindex")
dev_mode()
install.packages("hybridindex_1.0.tar.gz", repos=NULL, type="binary")
bugs <- read.csv("validation/bugs_mmi.csv", strip.white=T)
pred <- read.csv("validation/predictors_mmi.csv")
mmi_data <- new("mmi", bugdata = bugs, predictors = pred)
library(hybridindex)
mmi_data <- new("mmi", bugdata = bugs, predictors = pred)
mmiresults <- score(mmi_data)
traceback()
oeresults <- score(oe_data)
oe_data <- new("oe", bugdata = bugs, predictors = pred)
oeresults <- score(oe_data)
?loadDB
?loadDb
system.file("bug_metadata.db", pkg="hydridindex")
?system.file
system.file("bug_metadata.db", package="hydridindex")
system.file("data/bug_metadata.db", package="hydridindex")
system.file("data/bug_metadata.db", package="hydridindex", lib.loc="C:\\Documents and Settings\\gisuser\\My Documents\\R-dev")
system.file("data/bug_metadata.db", package="hydridindex", lib.loc=c("C:\\Documents and Settings\\gisuser\\My Documents\\R-dev"))
system.file("bug_metadata.db", package="hydridindex", lib.loc=c("C:\\Documents and Settings\\gisuser\\My Documents\\R-dev"))
system.file("bug_metadata", package="hydridindex", lib.loc=c("C:\\Documents and Settings\\gisuser\\My Documents\\R-dev"))
dev_mode()
system.file("bug_metadata", package="hydridindex", lib.loc=c("C:\\Documents and Settings\\gisuser\\My Documents\\R-dev"))
oeresults <- score(oe_data)
mmi_data <- new("mmi", bugdata = bugs, predictors = pred)
mmi_data
mmi_data@dbconn
mmi_data@dbconn <- dbConnection("SQLite", "C:\\Documents and Settings\\gisuser\\My Documents\\R-dev\\hybridindex\\data\bug_metadata.db")
library(RSQLite)
mmi_data@dbconn <- dbConnection("SQLite", "C:\\Documents and Settings\\gisuser\\My Documents\\R-dev\\hybridindex\\data\bug_metadata.db")
mmi_data@dbconn <- dbConnect("SQLite", "C:\\Documents and Settings\\gisuser\\My Documents\\R-dev\\hybridindex\\data\bug_metadata.db")
mmi_data@dbconn <- dbConnect("SQLite", "C:/Documents and Settings/gisuser/My Documents/R-dev/hybridindex/data/bug_metadata.db")
mmi_data@dbconn
mmi_data <- new("mmi", bugdata = bugs, predictors = pred)
mmi_data@dbconn <- dbConnect("SQLite", "C:/Documents and Settings/gisuser/My Documents/R-dev/hybridindex/data/bug_metadata.db")
mmiresults <- score(mmi_data)
?lazyLoad
?system.file
system.file("bug_metadata", package="hydridindex", lib.loc=c("C:\\Documents and Settings\\gisuser\\My Documents\\R-dev\\hydridindex"))
system.file("bug_metadata", package="hydridindex", lib.loc=c("C:/Documents and Settings/gisuser/My Documents/R-dev"))
system.file("data/bug_metadata.db", package="hydridindex", lib.loc=c("C:/Documents and Settings/gisuser/My Documents/R-dev"))
system.file("data/bug_metadata.db", package="hydridindex", lib.loc="C:/Documents and Settings/gisuser/My Documents/R-dev")
system.file(package="hydridindex", lib.loc="C:/Documents and Settings/gisuser/My Documents/R-dev")
system.file(package="stats")
system.file(package="hydridindex", lib.loc="C:/Documents and Settings/gisuser/My Documents/R-dev")
library(devtools)
build("hybridindex")
dev_mode()
install.packages("hybridindex_1.0.tar.gz")
install.packages("hybridindex_1.0.tar.gz", repos=NULL, type="binary")
build("hybridindex/")
build("hybridindex")
install.packages("hybridindex_1.0.tar.gz", repos=NULL, type="binary")
library(hydridindex)
library(hybridindex)
mmi_data <- new("mmi", bugdata = bugs, predictors = pred)
mmiresults <- score(mmi_data)
bugs <- read.csv("validation/bugs_mmi.csv", strip.white=T)
pred <- read.csv("validation/predictors_mmi.csv")
library(devtools)
dev_mode()
install.packages("hybridindex_1.0.tar.gz", type="binary", repos=NULL)
library(hybridindex)
mmi_data <- new("mmi", bugdata = bugs, predictors = pred)
oe_data <- new("oe", bugdata = bugs, predictors = pred)
mmiresults <- score(mmi_data)
mmi_data@dbconn
dev_mode()
instal.packages("hybridindex_1.0.tar.gz", repos=NULL, type="binary")
install.packages("hybridindex_1.0.tar.gz", repos=NULL, type="binary")
library(hybridindex)
bugs <- read.csv("validation/bugs_mmi.csv", strip.white=T)
pred <- read.csv("validation/predictors_mmi.csv")
mmi_data <- new("mmi", bugdata = bugs, predictors = pred)
oe_data <- new("oe", bugdata = bugs, predictors = pred)
mmiresults <- score(mmi_data)
mmi_data@dbconn
mmi_data <- new("mmi", bugdata = bugs, predictors = pred)
mmi_data@dbconn
lazyLoad(system.file("data", "forestsdb.rdb", "hybridindex"))
system.file("data", "forestsdb.rdb", "hybridindex")
system.file("data", "forestsdb.rdb", package="hybridindex")
system.file("data", "bug_metadata.db", package="hybridindex")
library(devtools)
build("hybridindex_1.0.tar.gz")
build("hybridindex")
install.packages("hybridindex_1.0.tar.gz", repos=NULL, type="binary")
build("hybridindex")
install.packages("hybridindex_1.0.tar.gz", repos=NULL, type="binary")
build("hybridindex")
install.packages("hybridindex_1.0.tar.gz", repos=NULL, type="binary")
library(hybridindex)
bugs <- read.csv("validation/bugs_mmi.csv", strip.white=T)
pred <- read.csv("validation/predictors_mmi.csv")
mmi_data <- new("mmi", bugdata = bugs, predictors = pred)
mmi_data@dbconn
system.file("data", "bug_metadata.db", package="hybridindex")
dbconn = dbConnect("SQLite", system.file("data", "bug_metadata.db", package="hybridindex"))
dbconn
mmi_data@dbconn <- dbconn
mmi_data@dbconn
mmiresults <- score(mmi_data)
library(devtools)
build("hybridindex")
install.packages("hybridindex_1.0.tar.gz", repos=NULL, type="binary")
build("hybridindex")
install.packages("hybridindex_1.0.tar.gz", repos=NULL, type="binary")
library(hybridindex)
bugs <- read.csv("validation/bugs_mmi.csv", strip.white=T)
pred <- read.csv("validation/predictors_mmi.csv")
mmi_data <- new("mmi", bugdata = bugs, predictors = pred)
mmi_data@dbconn
mmi_data <- new("mmi", bugdata = bugs, predictors = pred)
oe_data <- new("oe", bugdata = bugs, predictors = pred)
mmiresults <- score(mmi_data)
system.file("data", "forestsdb", package="hybridindex")
system.file("data", "forestsdb.rdx", package="hybridindex")
lazyLoad(system.file("data", "forestsdb.rdx", package="hybridindex"))
paste(system.file("data", package="hybridindex"), "forestsdb", sep="")
lazyLoad(paste(system.file("data", package="hybridindex"), "forestsdb", sep=""))
lazyLoad(paste(system.file("data", package="hybridindex"), "/forestsdb", sep=""))
library(devtools)
build("hybridindex")
install.packages("hybridindex_1.0.tar.gz", repos=NULL, type="binary")
library(hybridindex)
bugs <- read.csv("validation/bugs_mmi.csv", strip.white=T)
pred <- read.csv("validation/predictors_mmi.csv")
mmi_data <- new("mmi", bugdata = bugs, predictors = pred)
oe_data <- new("oe", bugdata = bugs, predictors = pred)
mmiresults <- score(mmi_data)
plot(mmiresults)
oeresults <- score(oe_data)
library(devtools)
build("hybridindex")
install.packages("hybridindex_1.0.tar.gz", repos=NULL, type="binary")
library(hybridindex)
bugs <- read.csv("validation/bugs_mmi.csv", strip.white=T)
pred <- read.csv("validation/predictors_mmi.csv")
mmi_data <- new("mmi", bugdata = bugs, predictors = pred)
oe_data <- new("oe", bugdata = bugs, predictors = pred)
mmiresults <- score(mmi_data)
oeresults <- score(oe_data)
mean <- new("metric.mean", x=mmiresults, y=oeresults)
mean.table <- summary(mean, report="basic")
View(mean.table)
plot(mean)
?randomForest
View(pred)
randomForest(ELEV_RANGE ~ PPT_00_09 + KFCT_AVE + P_MEAN, data=pred)
source('~/.active-rstudio-document', echo=TRUE)
?rf
?rforest
library(devtools)
build("hybridindex")
install.packages("hybridindex_1.0.tar.gz", repos=NULL, type="binary")
build("hybridindex")
install.packages("hybridindex_1.0.tar.gz", repos=NULL, type="binary")
build("hybridindex")
install.packages("hybridindex_1.0.tar.gz", repos=NULL, type="binary"
)
library(hybridindex)
bugs <- read.csv("validation/bugs_mmi.csv", strip.white=T)
pred <- read.csv("validation/predictors_mmi.csv")
mmi_data <- new("mmi", bugdata = bugs, predictors = pred)
oe_data <- new("oe", bugdata = bugs, predictors = pred)
mmiresults <- score(mmi_data)
mmi.results.table <- summary(mmiresults)
View(mmi.results.table)
oeresults <- score(oe_data)
oe.results.table <- summary(oeresults)
View(oe.results.table)
mean <- new("metric.mean", x=mmiresults, y=oeresults)
mean.table <- summary(mean, report="basic")
View(mean.table)
plot(mean)
?install.packages
?require
if(require(randomForest)==T)"yes"
if(require(randomForest)==F)install.package(randomForest)
if(require(plyr)==F)install.package(plyr)
if(require(doParallel)==F)install.package(doParallel)
if(require(vegan)==F)install.package(vegan)
if(require(ggmap)==F)install.package(ggmap)
if(require(reshape2)==F)install.package(reshape2)
if(require(RSQLite)==F)install.package(RSQLite)
install.package("P:/PartTimers/MarkEngeln/bug_mmi/hybridindex_1.0.tar.gz", repos=NULL, type="binary"))
install.package("P:/PartTimers/MarkEngeln/bug_mmi/hybridindex_1.0.tar.gz", repos=NULL, type="binary")
install.packages("P:/PartTimers/MarkEngeln/bug_mmi/hybridindex_1.0.tar.gz", repos=NULL, type="binary")
plot(mean)
mean.table <- summary(mean, report="basic")
View(mean.table)
?chartr
?install_github
?args
?commandArgs
source('~/.active-rstudio-document', echo=TRUE)
View(object@mean.metric)
View(mean@mean.metric)
View(mean@result)
View(mmi@subsample)
View(mmiresults@subsample)
View(object@modelpredictions)
View(mea@modelpredictions)
View(mean@modelpredictions)
View(mmiresults@modelpredictions)
View(mmiresults@modelprediction)
View(mean@summary)
mean@finalscore
View(mean@finalscore)
mmiresults@result
View(mmiresults@result)
View(mean.table)
mean.table <- summary(mean, report="detailed")
View(mean.table)
mmiresults@metrics
View(mmiresults@metrics)
object@finalscore <- data.frame(unique(object@modelprediction$V1),
View(mmiresults@metrics[, 180:189])
View(mmiresults@metrics[, 181:189])
mean.table <- summary(mean, report="standard")
View(mean.table)
View(mean@result)
nrow(mean@result)
View(mean@result)
names(mean@result)[10:18]
source('P:/PartTimers/MarkEngeln/bug_mmi/hybridindex/R/classes.r', echo=TRUE)
library(RSQLite)
source('P:/PartTimers/MarkEngeln/bug_mmi/hybridindex/R/classes.r', echo=TRUE)
traceback()
source('P:/PartTimers/MarkEngeln/bug_mmi/hybridindex/R/classes.r', echo=TRUE)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/classes.r', echo=TRUE)
rm(list=ls())
source('P:/PartTimers/MarkEngeln/bug_mmi/r/classes.r', echo=TRUE)
traceback()
source('~/.active-rstudio-document', echo=TRUE)
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
traceback()
source('P:/PartTimers/MarkEngeln/bug_mmi/r/classes.r', echo=TRUE)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/classes.r', echo=TRUE)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/classes.r', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
bugs <- read.csv("P:/PartTimers/MarkEngeln/bug_mmi/validation/bugs_mmi.csv", strip.white=T)
pred <- read.csv("P:/PartTimers/MarkEngeln/bug_mmi/validation/predictors_mmi.csv")
###Create data objects###
mmi_data <- new("mmi", bugdata = bugs, predictors = pred)
oe_data <- new("oe", bugdata = bugs, predictors = pred)
###MMI###
mmiresults <- score(mmi_data)
oeresults <- score(oe_data)
mean <- new("metric.mean", x=mmiresults, y=oeresults)
mean.table <- summary(mean, report="detailed")
View(mean.table)
source('~/.active-rstudio-document', echo=TRUE)
mean.table <- summary(mean, report="detailed")
View(mean.table)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("Rcpp")
View(mean@metrics)
source('~/.active-rstudio-document', echo=TRUE)
mmiresults <- score(mmi_data)
mmi@bugdata$SampleID
mmiresults@bugdata$SampleID
paste(mmiresults@bugdata$SampleID, 1:nrow(mmiresults@bugdata)
)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
mmiresults <- score(mmi_data)
View(mmiresults@subsample)
View(mean.table)
View(mmiresults@subsample[which(mmiresults@subsample$SampleID == "205GCAxxx40374BMI_RWB2"),])
sum(mmiresults@subsample[which(mmiresults@subsample$SampleID == "205GCAxxx40374BMI_RWB2"),]$Result)
sum(mmiresults@bugdata[which(mmiresults@bugdata$SampleID == "205GCAxxx40374BMI_RWB2"),]$BAResult)
sum(bugs[which(bugs$SampleID == "205GCAxxx40374BMI_RWB2"),]$BAResult)
source('~/.active-rstudio-document', echo=TRUE)
mean <- new("metric.mean", x=mmiresults, y=oeresults)
###Create report. Report arguments can be "basic", "standard",
### "detailed", or "complete". Note that "complete" is a list,
###not a data frame.
mean.table <- summary(mean, report="detailed")
View(mean.table)
source('~/.active-rstudio-document', echo=TRUE)
mean.table <- summary(mean, report="detailed")
View(mean.table)
source('~/.active-rstudio-document', echo=TRUE)
mean.table <- summary(mean, report="detailed")
View(mean.table)
names(mean@mean.metric)
source('~/.active-rstudio-document', echo=TRUE)
mean.table <- summary(mean, report="detailed")
View(mean.table)
library(devtools)
build("hybridindex")
dev_mode()
dev_mode()
install.packages("hybridindex_1.1.tar.gz", repos=NULL, type="binary")
