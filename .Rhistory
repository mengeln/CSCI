x@mean.metric$HybridScore <- cut(x@mean.metric$Hybrid, breaks=c(0, .4, .8, 1.5), labels=c("low", "medium", "high"))
View(do.call(cbind, mean@fulliterations))
View(mean@subsample)
View(mean@oesubsample)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/classes.r', echo=TRUE)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/classes.r', echo=TRUE)
datadump <- summary(mean, report="complete")
str(datadump)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
traceback()
source("r/classes.r")
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
library(vegan)
?metaMDS
library(nnet)
?nnet
library(neuralnet)
?package.skeleton
?neuralnet
?package.skeleton
package.skeleton(name="ireporting", list=ls(), path="/ireporting")
package.skeleton(name="ireporting", list=ls(), path="pkg")
package.skeleton(name="ireporting", list=ls(), path="pkg")
package.skeleton(name="ireporting", list=ls(), path="pkg", code_files="r/classes.r")
package.skeleton(name="ireporting", list=ls(), path="pkg", code_files="r/classes.r")
install.package("RSQLite")
install.packages("RSQLite")
library(RSQLite)
?dbConnect
dbConnect("SQLite", "mmi")
load("data/base_map.rdata")
con <- dbConnect("SQLite", "mmi")
?dbWriteTable
dbWriteTable(con, "ibi", ibiv4)
dbReadTable(con)
dbReadTable(con, "ibi")
View(dbReadTable(con, "ibi"))
?dbApply
?dbApply
closeAllConnections
closeAllConnections()
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
library(SQLite)
install.packages("SQLite")
library(RSQLite)
conn <- dbConnect("SQLite", bug_metadata)
conn <- dbConnect("SQLite", "bug_metadata")
View(pred)
grps.final
preds.final
dbWriteTable(conn, "ibi", ibiv4)
dbWriteTable(conn, "taxonomy", taxonomy_v5)
dbWriteTable(conn, "maxmin", maxmin)
dbWriteTable(conn, "otu_crosswalk", otu_crosswalk)
dbWriteTable(conn, "example_pred", pred)
dbWriteTable(conn, "example_bugs", bugs)
dbWriteTable(conn, "predcal", predcal)
dbWriteTable(conn, "grps_final", grps.final)
grps <- data.frame(grps.final)
dbWriteTable(conn, "grps_final", grps)
dbListTables(conn)
?dbSendQuery
dbSendQuery(conn, FROM grps GET *)
?dbSendQuery
dbSendQuery(conn, FROM grps SELECT *)
dbSendQuery(conn, SELECT * FROM grps)
dbSendQuery(conn, "SELECT * FROM grps")
dbListTables(conn)
dbSendQuery(conn, "SELECT * FROM grps_final")
dbClearResult()
dbGetQuery(conn, "SELECT * FROM grps_final")
library(randomForest)
library(plyr)
library(doParallel)
library(vegan)
library(ggmap)
library(reshape2)
load("data/FinalForests.Rdata")
load("data/ibiv4.RData")
load("data/taxonomy_v5.RData")
load("data/Metrics.Max.Min.Rdata")
load("data/otu_crosswalk.rdata")
load("data/OE.RF.Model.Rdata")
min <- c(Number_Coleoptera_Taxa.min.met, Number_Diptera_Taxa.min.met, Number_Scraper_Taxa.min.met,
Number_Predator_Taxa.min.met, Number_CF___CG_Taxa.min.met, Number_ShredderTaxa.min.met,
Percent_Intolerant_Taxa__0_2_.min.met, Percent_Non_Insecta_Taxa.min.met,
Tolerance_Value.min.met
)
max <- c(Number_Coleoptera_Taxa.max.met, Number_Diptera_Taxa.max.met, Number_Scraper_Taxa.max.met,
Number_Predator_Taxa.max.met, Number_CF___CG_Taxa.max.met, Number_ShredderTaxa.max.met,
Percent_Intolerant_Taxa__0_2_.max.met, Percent_Non_Insecta_Taxa.max.met,
Tolerance_Value.max.met
)
maxminlabels <- c("coleoptera", "diptera", "scraper", "predator", "cfcg", "shredder",
"intolerant", "noninsect", "tolerance")
maxmin <- data.frame(maxminlabels, max, min)
library(RSQLite)
conn <- dbConnect("SQLite", "bug_metadata.db")
dbWriteTable(conn, "ibi", ibiv4)
dbWriteTable(conn, "taxonomy", taxonomy_v5)
dbWriteTable(conn, "maxmin", maxmin)
dbWriteTable(conn, "otu_crosswalk", otu_crosswalk)
dbWriteTable(conn, "example_pred", pred)
dbWriteTable(conn, "example_bugs", bugs)
dbWriteTable(conn, "predcal", predcal)
grps <- data.frame(grps.final)
dbWriteTable(conn, "grps_final", grps)
dbListTables(conn)
dbGetQuery(conn, "SELECT * FROM grps_final")
test1 <- dbGetQuery(conn, "SELECT grps_final FROM grps_final")
str(test1)
test1
str(test1)
test1 <- dbGetQuery(conn, "SELECT * FROM grps_final")$grps_final
test1
?dbGetQuery
?lazyload
?lazyLoad
?local
forestsdb = local({load("data/FinalForests.Rdata"); environment()})
tools:::makeLazyLoadDB(forestsdb, "New")
tools:::makeLazyLoadDB(forestsdb, "forestsdb")
rm(list=ls())
source('P:/PartTimers/MarkEngeln/bug_mmi/r/classes.r', echo=TRUE)
lazyLoad("data/forestsdb")
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
dbDisconnect(conn)
dbListConnections()
dbListConnections("SQLite")
?dbListConnections
dbListConnection(SQLite)
dbListConnections(SQLite)
dbListConnections("SQLite")
dbListConnections(dbDriver("SQLite"))
dbListConnections(dbDriver("ODBC"))
dbListConnections(dbDriver("MySQL"))
dbListConnections(dbDriver("SQLite"))
library(RSQLite)
conn <- dbConnect("SQLite", "data/bug_metadata.db")
dbListConnections(dbDriver("SQLite"))
dbDisconnect(conn)
?attach
source('~/.active-rstudio-document', echo=TRUE)
forestsdb <- local({load("data/FinalForests.Rdata"); environment()})
str(forestsdb)
?load
require(gdata)
load("data/OE.RF.Model.Rdata", envir=forestsdb)
?ls
ls(envir=forestsdb)
tools:::makeLazyLoadDB(forestsdb, "forestsdb")
tools:::makeLazyLoadDB(forestsdb, "forestsdb")
forestsdb <- local({load("data/FinalForests.Rdata"); environment()})
ls(envir=forestsdb)
forestsdb("rf.mod") <- rf.mod
?local
forestsdb <- local({rfmod <- rf.mod}, envir=forestsdb)
ls(envir=forestsdb)
ls(envir="forestsdb")
ls(envir=forestsdb)
str)fprestsdb
str(fprestsdb)
str(forestsdb)
ls(envir=forestsdb)
?ls
ls(envir = forestsdb)
forestsdb <- local({load("data/FinalForests.Rdata"); environment()})
forestsdb <- local({load("data/FinalForests.Rdata"); rfmod <- rf.mod; environment()})
ls(envir = forestsdb)
forestsdb <- local({load("data/FinalForests.Rdata"); rf.mod <- rf.mod; environment()})
ls(envir = forestsdb)
tools:::makeLazyLoadDB(forestsdb, "forestsdb")
load("data/OE.RF.Model.Rdata")
forestsdb <- local({load("data/FinalForests.Rdata"); rf.mod <- rf.mod; environment()})
tools:::makeLazyLoadDB(forestsdb, "forestsdb")
library(RSQLite)
str(conn)
conn <- dbConnect("SQLite", "data/bug_metadata.db")
str(conn)
dbListTables(conn)
bugcal.pa
dbListTables(conn)
dbWriteTable(conn, "bugcal.pa", bugcal.pa)
dbWriteTable(conn, "bugcal_pa", bugcal_pa)
conn <- dbConnect("SQLite", "data/bug_metadata.db")
dbWriteTable(conn, "bugcal_pa", bugcal_pa)
dbWriteTable(conn, "bugcal_pa", bugcal.pa)
dbListTables(conn)
View(predcal)
dbGetQuery(conn, "DROP predcal")
dbGetQuery(conn, "DROP TABLE predcal")
dbListTables(conn)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
traceback()
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
traceback()
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
traceback()
str(dbGetQuery(conn, "SELECT * FROM taxonomy"))
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
unique(dbGetQuery(conn, "Select STE FROM ibi")$STE)
dbGetQuery(conn, "Select SAFIT1 FROM ibi")
which(is.na(dbGetQuery(conn, "Select SAFIT1 FROM ibi")))
dbGetQuery(conn, "Select SAFIT1 FROM ibi WHERE ibi.SAFIT1 == NA")
dbGetQuery(conn, "Select SAFIT1 FROM ibi WHERE ibi.SAFIT1 == 'NA")
dbGetQuery(conn, "Select SAFIT1 FROM ibi WHERE ibi.SAFIT1 == 'NA'")
dbGetQuery(conn, "Select SAFIT1 FROM ibi WHERE ibi.SAFIT1 == '<NA>'")
mindex <- which(is.na(dbGetQuery(conn, "Select SAFIT1 FROM ibi")))
mindex
dbListFields(conn, "ibi")
dbGetQuery(conn, "Select row_names FROM ibi")
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.row_names ==" mindex))
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.row_names ==", mindex))
mindex
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.row_names IN", mindex))
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.row_names == (", mindex, ")", ))
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.row_names IN (", mindex, ")", ))
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.row_names = (", mindex, ")", ))
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.row_names =", mindex ))
mindex
paste(mindex, ",")
paste(mindex, ",", collapse="")
paste(mindex, ", ", collapse="")
dbListFields(conn, "ibi")
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.CustomSTE = ''))
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.CustomSTE = ''"))
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.CustomSTE is NULL"))
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.CustomSTE = NULL"))
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.CustomSTE = null"))
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.CustomSTE is null"))
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.SAFIT1 is null"))
dbGetQuery(conn, paste("UPDATE ibi SET SAFIT1 = 'Missing' WHERE SAFIT1 is null"))
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.SAFIT1 is null"))
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
dbGetQuery(conn, "SELECT * FROM taxonomy")
dbGetQuery(conn, "SELECT * FROM taxonomy WHERE TaxonomicLevelName is null")
"Rhyacophila vedra" %in% bugs$FinalID
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
View(bugs)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
dbGetQuery(conn, paste("UPDATE ibi SET SAFIT1 = FinalID WHERE SAFIT1 is 'Missing'"))
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.SAFIT1 is 'Missing'"))
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.SAFIT1 = 'Missing'"))
dbGetQuery(conn, paste("Select * FROM ibi WHERE ibi.SAFIT1 = Missing"))
dbGetQuery(conn, paste("Select * FROM ibi WHERE SAFIT1 = 'Missing'"))
dbGetQuery(conn, paste("Select * FROM ibi WHERE SAFIT1 = 'Missing'"))
dbGetQuery(conn, paste("Select * FROM ibi WHERE SAFIT1 is null))
dbGetQuery(conn, paste("Select * FROM ibi WHERE SAFIT1 is null"))
dbGetQuery(conn, paste("Select * FROM ibi WHERE CustomSTE is null"))
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
dbGetQuery(conn, paste("Select * FROM ibi WHERE FinalID is 'Dunella doddsi"))
dbGetQuery(conn, paste("Select * FROM ibi WHERE FinalID is 'Dunella doddsi'"))
ibi
dbGetQuery(conn, paste("Select * FROM ibi WHERE FinalID is 'Trichoptera'"))
dbListFields(conn, "ibi")
write.csv(dbGetQuery(conn, "SELECT * FROM ibi"), file="test.csv")
?read.csv
bugs <- read.csv("validation/bugs_mmi.csv", strip.white=T)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
library(RSQLite)
conn <- dbConnect("SQLite", "data/bug_metadata.db")
dbGetQuery(object@dbconn, "Select * FROM grps_final")
dbGetQuery(conn, "Select * FROM grps_final")
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
traceback()
dbGetQuery(conn, "Select * FROM grps_final")$grps_final
oeresults <- score(oe_data)
traceback()
bugspa1 <- dbGetQuery(conn, "Select * FROM bugcal_pa")
str(bugspa1)
row.names(bugspa1) <- bugspa1[, 1]
str(bugspa1)
View(bugspa1)
bugspa1 <- bugspa1[, 1:ncol(bugspa1)]
View(bugspa1)
source("r/classes.r")
oeresults <- score(oe_data)
oe.results.table <- summary(oeresults)
View(oe.results.table)
mean <- new("metric.mean", x=mmiresults, y=oeresults)
mean.table <- summary(mean, report="basic")
View(mean.table)
plot(mean)
s <- system.time()
s
s <- proc.time()
s
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
?warn
?warning
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
warnings()
traceback()
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
mmiresults <- score(mmi_data)
?paste
warning
?warning
source("r/classes.r")
mmiresults <- score(mmi_data)
source("r/classes.r")
mmiresults <- score(mmi_data)
source("r/classes.r")
mmi_data <- new("mmi", bugdata = bugs, predictors = pred)
mmiresults <- score(mmi_data)
?paste
source("r/classes.r")
mmiresults <- score(mmi_data)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
warnings()
warnigs()
warnings()
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
traceback()
?dcast
source("r/classes.r")
oeresults <- score(oe_data)
?cast
source("r/classes.r")
oeresults <- score(oe_data)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/classes.r', echo=TRUE)
oeresults <- score(oe_data)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/classes.r', echo=TRUE)
oeresults <- score(oe_data)
?.mean
source("r/classes.r")
oeresults <- score(oe_data)
oe.results.table <- summary(oeresults)
View(oe.results.table)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/run_mmi.r', echo=TRUE)
?package.skeleton
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
package.skeleton(name="hybridindex", list=ls())
package.skeleton(name="hybridindex", code_files=c("r/classes.r", "r/model.predict.RanFor.4.2.r"))
?system.file
load("P:/PartTimers/MarkEngeln/bug_mmi/hybridindex/Data/base_map.rdata")
lazyLoad("data/forestsdb")
library(devtools)
?devtools
library(devtools)
getwd()
build("/hybridindex")
build("hybridindex/")
?build
build("hybridindex")
dev_mode()
install("hydridindex_1.0.tar.gz")
install.packages("hydridindex_1.0.tar.gz")
install.packages("hydridindex_1.0.tar.gz", repos=NULL)
getwd()
install.packages("hybridindex_1.0.tar.gz", repos=NULL)
install.packages("hybridindex_1.0.tar.gz", repos=NULL, type="binary")
dev_mode()
build("hydrixindex")
build("hybridindex")
dev_mode()
install.packages("hybridindex_1.0.tar.gz", repos=NULL, type="binary")
bugs <- read.csv("validation/bugs_mmi.csv", strip.white=T)
pred <- read.csv("validation/predictors_mmi.csv")
mmi_data <- new("mmi", bugdata = bugs, predictors = pred)
library(hybridindex)
mmi_data <- new("mmi", bugdata = bugs, predictors = pred)
mmiresults <- score(mmi_data)
traceback()
oeresults <- score(oe_data)
oe_data <- new("oe", bugdata = bugs, predictors = pred)
oeresults <- score(oe_data)
?loadDB
?loadDb
system.file("bug_metadata.db", pkg="hydridindex")
?system.file
system.file("bug_metadata.db", package="hydridindex")
system.file("data/bug_metadata.db", package="hydridindex")
system.file("data/bug_metadata.db", package="hydridindex", lib.loc="C:\\Documents and Settings\\gisuser\\My Documents\\R-dev")
system.file("data/bug_metadata.db", package="hydridindex", lib.loc=c("C:\\Documents and Settings\\gisuser\\My Documents\\R-dev"))
system.file("bug_metadata.db", package="hydridindex", lib.loc=c("C:\\Documents and Settings\\gisuser\\My Documents\\R-dev"))
system.file("bug_metadata", package="hydridindex", lib.loc=c("C:\\Documents and Settings\\gisuser\\My Documents\\R-dev"))
dev_mode()
system.file("bug_metadata", package="hydridindex", lib.loc=c("C:\\Documents and Settings\\gisuser\\My Documents\\R-dev"))
oeresults <- score(oe_data)
mmi_data <- new("mmi", bugdata = bugs, predictors = pred)
mmi_data
mmi_data@dbconn
mmi_data@dbconn <- dbConnection("SQLite", "C:\\Documents and Settings\\gisuser\\My Documents\\R-dev\\hybridindex\\data\bug_metadata.db")
library(RSQLite)
mmi_data@dbconn <- dbConnection("SQLite", "C:\\Documents and Settings\\gisuser\\My Documents\\R-dev\\hybridindex\\data\bug_metadata.db")
mmi_data@dbconn <- dbConnect("SQLite", "C:\\Documents and Settings\\gisuser\\My Documents\\R-dev\\hybridindex\\data\bug_metadata.db")
mmi_data@dbconn <- dbConnect("SQLite", "C:/Documents and Settings/gisuser/My Documents/R-dev/hybridindex/data/bug_metadata.db")
mmi_data@dbconn
mmi_data <- new("mmi", bugdata = bugs, predictors = pred)
mmi_data@dbconn <- dbConnect("SQLite", "C:/Documents and Settings/gisuser/My Documents/R-dev/hybridindex/data/bug_metadata.db")
mmiresults <- score(mmi_data)
?lazyLoad
?system.file
system.file("bug_metadata", package="hydridindex", lib.loc=c("C:\\Documents and Settings\\gisuser\\My Documents\\R-dev\\hydridindex"))
system.file("bug_metadata", package="hydridindex", lib.loc=c("C:/Documents and Settings/gisuser/My Documents/R-dev"))
system.file("data/bug_metadata.db", package="hydridindex", lib.loc=c("C:/Documents and Settings/gisuser/My Documents/R-dev"))
system.file("data/bug_metadata.db", package="hydridindex", lib.loc="C:/Documents and Settings/gisuser/My Documents/R-dev")
system.file(package="hydridindex", lib.loc="C:/Documents and Settings/gisuser/My Documents/R-dev")
system.file(package="stats")
system.file(package="hydridindex", lib.loc="C:/Documents and Settings/gisuser/My Documents/R-dev")
library(devtools)
build("hybridindex")
dev_mode()
install.packages("hybridindex_1.0.tar.gz")
install.packages("hybridindex_1.0.tar.gz", repos=NULL, type="binary")
build("hybridindex/")
build("hybridindex")
install.packages("hybridindex_1.0.tar.gz", repos=NULL, type="binary")
library(hydridindex)
library(hybridindex)
mmi_data <- new("mmi", bugdata = bugs, predictors = pred)
mmiresults <- score(mmi_data)
bugs <- read.csv("validation/bugs_mmi.csv", strip.white=T)
pred <- read.csv("validation/predictors_mmi.csv")
library(devtools)
dev_mode()
install.packages("hybridindex_1.0.tar.gz", type="binary", repos=NULL)
library(hybridindex)
mmi_data <- new("mmi", bugdata = bugs, predictors = pred)
oe_data <- new("oe", bugdata = bugs, predictors = pred)
mmiresults <- score(mmi_data)
mmi_data@dbconn
dev_mode()
instal.packages("hybridindex_1.0.tar.gz", repos=NULL, type="binary")
install.packages("hybridindex_1.0.tar.gz", repos=NULL, type="binary")
library(hybridindex)
bugs <- read.csv("validation/bugs_mmi.csv", strip.white=T)
pred <- read.csv("validation/predictors_mmi.csv")
mmi_data <- new("mmi", bugdata = bugs, predictors = pred)
oe_data <- new("oe", bugdata = bugs, predictors = pred)
mmiresults <- score(mmi_data)
mmi_data@dbconn
mmi_data <- new("mmi", bugdata = bugs, predictors = pred)
mmi_data@dbconn
lazyLoad(system.file("data", "forestsdb.rdb", "hybridindex"))
system.file("data", "forestsdb.rdb", "hybridindex")
system.file("data", "forestsdb.rdb", package="hybridindex")
system.file("data", "bug_metadata.db", package="hybridindex")
library(devtools)
build("hybridindex_1.0.tar.gz")
build("hybridindex")
install.packages("hybridindex_1.0.tar.gz", repos=NULL, type="binary")
build("hybridindex")
install.packages("hybridindex_1.0.tar.gz", repos=NULL, type="binary")
build("hybridindex")
install.packages("hybridindex_1.0.tar.gz", repos=NULL, type="binary")
library(hybridindex)
bugs <- read.csv("validation/bugs_mmi.csv", strip.white=T)
pred <- read.csv("validation/predictors_mmi.csv")
mmi_data <- new("mmi", bugdata = bugs, predictors = pred)
mmi_data@dbconn
system.file("data", "bug_metadata.db", package="hybridindex")
dbconn = dbConnect("SQLite", system.file("data", "bug_metadata.db", package="hybridindex"))
dbconn
mmi_data@dbconn <- dbconn
mmi_data@dbconn
mmiresults <- score(mmi_data)
library(devtools)
build("hybridindex")
install.packages("hybridindex_1.0.tar.gz", repos=NULL, type="binary")
build("hybridindex")
install.packages("hybridindex_1.0.tar.gz", repos=NULL, type="binary")
library(hybridindex)
bugs <- read.csv("validation/bugs_mmi.csv", strip.white=T)
pred <- read.csv("validation/predictors_mmi.csv")
mmi_data <- new("mmi", bugdata = bugs, predictors = pred)
mmi_data@dbconn
mmi_data <- new("mmi", bugdata = bugs, predictors = pred)
oe_data <- new("oe", bugdata = bugs, predictors = pred)
mmiresults <- score(mmi_data)
system.file("data", "forestsdb", package="hybridindex")
system.file("data", "forestsdb.rdx", package="hybridindex")
lazyLoad(system.file("data", "forestsdb.rdx", package="hybridindex"))
paste(system.file("data", package="hybridindex"), "forestsdb", sep="")
lazyLoad(paste(system.file("data", package="hybridindex"), "forestsdb", sep=""))
lazyLoad(paste(system.file("data", package="hybridindex"), "/forestsdb", sep=""))
library(devtools)
build("hybridindex")
install.packages("hybridindex_1.0.tar.gz", repos=NULL, type="binary")
library(hybridindex)
bugs <- read.csv("validation/bugs_mmi.csv", strip.white=T)
pred <- read.csv("validation/predictors_mmi.csv")
mmi_data <- new("mmi", bugdata = bugs, predictors = pred)
oe_data <- new("oe", bugdata = bugs, predictors = pred)
mmiresults <- score(mmi_data)
plot(mmiresults)
oeresults <- score(oe_data)
library(devtools)
build("hybridindex")
install.packages("hybridindex_1.0.tar.gz", repos=NULL, type="binary")
library(hybridindex)
bugs <- read.csv("validation/bugs_mmi.csv", strip.white=T)
pred <- read.csv("validation/predictors_mmi.csv")
mmi_data <- new("mmi", bugdata = bugs, predictors = pred)
oe_data <- new("oe", bugdata = bugs, predictors = pred)
mmiresults <- score(mmi_data)
oeresults <- score(oe_data)
mean <- new("metric.mean", x=mmiresults, y=oeresults)
mean.table <- summary(mean, report="basic")
View(mean.table)
plot(mean)
?randomForest
View(pred)
randomForest(ELEV_RANGE ~ PPT_00_09 + KFCT_AVE + P_MEAN, data=pred)
source('~/.active-rstudio-document', echo=TRUE)
