con <- mmidata@dbconn
dbListTables(con)
View(dbGetQuery(con, "SELECT * FROM ibitable2"))
taxontable <- read.delim("clipboard", header=T)
View(taxontable)
dbtaxa <- (dbGetQuery(con, "SELECT * FROM ibitable2"))
totaltaxa <- merge(taxontable, dbtaxa)
View(totaltaxa)
dbWriteTable(con, "ibitable2", totaltaxa)
dbGetQuery(con, "DROP TABLE ibitable2")
dbListTables(con)
dbWriteTable(con, "ibitable2", totaltaxa)
row.names(totaltaxa)
dbWriteTable(con, "ibitable2", totaltaxa)
dbWriteTable(con, "ibitable3", totaltaxa)
names(totaltaxa)
totaltaxa[, -which(names(totaltaxa=="row_names")),]
totaltaxa[, -which(names(totaltaxa)=="row_names"),]
names(totaltaxa[, -which(names(totaltaxa)=="row_names"),])
totaltaxa <- totaltaxa[, -which(names(totaltaxa)=="row_names"),]
dbWriteTable(con, "ibitable2", totaltaxa)
dbListTables(con)
mmiresults <- score(mmidata)
View(summary(mmiresults))
oedata <- new("oe", bugdata=val.bugs.test, predictors=val.pred)
oedata <- new("oe", bugdata=val.bugs, predictors=val.pred)
oeresults <- score(oedata)
traceback()
oeresults <- score(oedata)
lapply(list.files("r"), function(file)source(paste("r/", file, sep="")))
oeresults <- score(oedata)
lapply(list.files("r"), function(file)source(paste("r/", file, sep="")))
oeresults <- score(oedata)
View(summary(oeresults))
hybrid <- new("metric.mean", mmiresults, oeresults)
View(summary(hybrid, report="detailed"))
?.C
library(vegan)
metaMDS
monoMDS
dbListFields(con, ibitable2)
dbListFields(con, "ibitable2")
library(randomForest)
library(plyr)
library(doParallel)
library(vegan)
library(ggmap)
library(reshape2)
library(RSQLite)
library(stringr)
lapply(list.files("r"), function(file)source(paste("r/", file, sep="")))
val.bugs <- read.csv("C:/Documents and Settings/gisuser/Desktop/val.bugs.csv", stringsAsFactors=F)
val.pred <- read.csv("C:/Documents and Settings/gisuser/Desktop/val.pred.csv", stringsAsFactors=F)
val.bugs$SampleID <- paste(val.bugs$StationCode, val.bugs$SampleDate, val.bugs$CollectionMethodCode, val.bugs$Replicate)
val.bugs$DistinctCode <- rep("", nrow(val.bugs))
lapply(list.files("r"), function(file)source(paste("r/", file, sep="")))
rm(list=ls())
lapply(list.files("r"), function(file)source(paste("r/", file, sep="")))
val.bugs <- read.csv("C:/Documents and Settings/gisuser/Desktop/val.bugs.csv", stringsAsFactors=F)
val.pred <- read.csv("C:/Documents and Settings/gisuser/Desktop/val.pred.csv", stringsAsFactors=F)
val.bugs$SampleID <- paste(val.bugs$StationCode, val.bugs$SampleDate, val.bugs$CollectionMethodCode, val.bugs$Replicate)
val.bugs$DistinctCode <- rep("", nrow(val.bugs))
ldata <- read.delim("clipboard", header=T)
View(ldata)
str(ldata)
ldata <- read.delim("clipboard", header=T, stringsAsFactors=F)
str(ldata)
val.bugs2 <- merge(val.bugs, ldata, all=F, all.x=F, all.y=F)
View(val.bugs2)
unique(val.bugs2$StationCode)
val.pred2 <- val.pred[which(val.pred$StationCode %in% unique(val.bugs2$StationCode)), ]
View(val.pred2)
mmidata <- new("mmi", bugdata=val.bugs2, predictors=val.pred2)
mmiresults <- score(mmidata)
traceback()
con <- dbConnect("SQLite", "data/bug_metadata.db")
dbListFields(con, "ibitable2")
lapply(list.files("r"), function(file)source(paste("r/", file, sep="")))
mmidata <- new("mmi", bugdata=val.bugs2, predictors=val.pred2)
mmiresults <- score(mmidata)
lapply(list.files("r"), function(file)source(paste("r/", file, sep="")))
mmiresults <- score(mmidata)
traceback()
View(val.bugs2)
str(val.bugs2)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/class2_mmi.r', echo=TRUE)
mmiresults <- score(mmidata)
?merge
source('~/.active-rstudio-document', echo=TRUE)
mmiresults <- score(mmidata)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/class2_mmi.r', echo=TRUE)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/class2_mmi.r', echo=TRUE)
mmiresults <- score(mmidata)
View(summary(mmiresults))
oedata <- new("oe", bugdata=val.bugs, predictors=val.pred)
oeresults <- score(oedata)
hybrid <- new("metric.mean", mmiresults, oeresults)
hybrid <- new("metricMean", mmiresults, oeresults)
View(summary(hybrid, report="detailed"))
summary(hybrid, report="detailed")
View(summary(oesresults))
View(summary(oeresults))
View(summary(hybrid, report="detailed"))
traceback()
View(summary(oeresults))
oedata <- new("oe", bugdata=val.bugs2, predictors=val.pred2)
oeresults <- score(oedata)
hybrid <- new("metricMean", mmiresults, oeresults)
View(summary(hybrid, report="detailed"))
source('P:/PartTimers/MarkEngeln/bug_mmi/r/class3_metricMean.r', echo=TRUE)
hybrid <- new("metricMean", mmiresults, oeresults)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/class2_mmi.r', echo=TRUE)
mmidata <- new("mmi", bugdata=val.bugs2, predictors=val.pred2)
plot(hybrid)
View(summary(hybrid, report="detailed"))
library(devtools)
build(pkg="hybridindex")
build(pkg="hybridindex")
write.csv(val.bugs2, file="validation/val.bugs2.csv")
write.csv(val.pred2, file="validation/val.pred2.csv")
val.bugs2 <- read.csv("P:/PartTimers/MarkEngeln/bug_mmi/validation/val.bugs2.csv", stringsAsFactors=F)
View(val.bugs2)
install.packages("P:/PartTimers/MarkEngeln/bug_mmi/hybridindex_1.3.tar.gz", repos = NULL)
install.packages("P:/PartTimers/MarkEngeln/bug_mmi/hybridindex_1.3.tar.gz", repos = NULL, type="source")
library(devtools)
build(pkg="hybridindex")
install.packages("P:/PartTimers/MarkEngeln/bug_mmi/hybridindex_1.3.tar.gz", repos = NULL, type="source")
library(hybridindex)
val.bugs2 <- read.csv("P:/PartTimers/MarkEngeln/bug_mmi/validation/val.bugs2.csv", stringsAsFactors=F)
val.pred2 <- read.csv("P:/PartTimers/MarkEngeln/bug_mmi/validation/val.pred2.csv", stringsAsFactors=F)
mmidata <- new("mmi", bugdata=val.bugs2, predictors=val.pred2)
mmiresults <- score(mmidata)
oedata <- new("oe", bugdata=val.bugs2, predictors=val.pred2)
oeresults <- score(oedata)
hybrid <- new("metricMean", mmiresults, oeresults)
View(summary(hybrid, report="detailed"))
build(pkg="hybridindex")
install.packages("P:/PartTimers/MarkEngeln/bug_mmi/hybridindex_1.3.tar.gz", repos = NULL, type="source")
traceback()
install.packages("P:/PartTimers/MarkEngeln/bug_mmi/hybridindex_1.3.tar.gz", repos = NULL, type="source")
lapply(list.files("r"), function(file)source(paste("r/", file, sep="")))
library(randomForest)
library(plyr)
library(doParallel)
library(vegan)
library(ggmap)
library(reshape2)
library(RSQLite)
library(stringr)
rm(list=ls())
lapply(list.files("hybridindex/r"), function(file)source(paste("hybridindex/r/", file, sep="")))
traceback()
lapply(list.files("hybridindex/r"), function(file)source(paste("hybridindex/r/", file, sep="")))
lapply(list.files("hybridindex/r"), function(file)source(paste("hybridindex/r/", file, sep="")))
lapply(list.files("hybridindex/r"), function(file)source(paste("hybridindex/r/", file, sep="")))
val.bugs2 <- read.csv("P:/PartTimers/MarkEngeln/bug_mmi/validation/val.bugs2.csv", stringsAsFactors=F)
val.pred2 <- read.csv("P:/PartTimers/MarkEngeln/bug_mmi/validation/val.pred2.csv", stringsAsFactors=F)
mmidata <- new("mmi", bugdata=val.bugs2, predictors=val.pred2)
mmiresults <- score(mmidata)
oedata <- new("oe", bugdata=val.bugs2, predictors=val.pred2)
oeresults <- score(oedata)
hybrid <- new("metricMean", mmiresults, oeresults)
View(summary(hybrid, report="detailed"))
library(devtools)
build(pkg="hybridindex")
install.packages("P:/PartTimers/MarkEngeln/bug_mmi/hybridindex_1.3.tar.gz", repos = NULL, type="source")
val.bugs2 <- read.csv("P:/PartTimers/MarkEngeln/bug_mmi/validation/val.bugs2.csv", stringsAsFactors=F)
library(hybridindex)
val.pred2 <- read.csv("P:/PartTimers/MarkEngeln/bug_mmi/validation/val.pred2.csv", stringsAsFactors=F)
mmidata <- new("mmi", bugdata=val.bugs2, predictors=val.pred2)
mmiresults <- score(mmidata)
build(pkg="hybridindex")
install.packages("P:/PartTimers/MarkEngeln/bug_mmi/hybridindex_1.3.tar.gz", repos = NULL, type="source")
library(hybridindex)
val.bugs2 <- read.csv("P:/PartTimers/MarkEngeln/bug_mmi/validation/val.bugs2.csv", stringsAsFactors=F)
val.pred2 <- read.csv("P:/PartTimers/MarkEngeln/bug_mmi/validation/val.pred2.csv", stringsAsFactors=F)
mmidata <- new("mmi", bugdata=val.bugs2, predictors=val.pred2)
mmiresults <- score(mmidata)
oedata <- new("oe", bugdata=val.bugs2, predictors=val.pred2)
oeresults <- score(oedata)
hybrid <- new("metricMean", mmiresults, oeresults)
View(summary(hybrid, report="detailed"))
plot(hybrid)
View(val.pred2)
plot(mmiresults)
View(val.pred2)
hybrid@prediction
getSlots("metricMean")
View(hybrid@predictors)
View(hybrid@predictors)
build("hybridindex")
library(devtools)
build("hybridindex")
install.packages("P:/PartTimers/MarkEngeln/bug_mmi/hybridindex_1.3.tar.gz", repos = NULL, type="source")
library(hybridindex)
val.bugs2 <- read.csv("P:/PartTimers/MarkEngeln/bug_mmi/validation/val.bugs2.csv", stringsAsFactors=F)
val.pred2 <- read.csv("P:/PartTimers/MarkEngeln/bug_mmi/validation/val.pred2.csv", stringsAsFactors=F)
mmidata <- new("mmi", bugdata=val.bugs2, predictors=val.pred2)
mmiresults <- score(mmidata)
oedata <- new("oe", bugdata=val.bugs2, predictors=val.pred2)
oeresults <- score(oedata)
hybrid <- new("metricMean", mmiresults, oeresults)
View(summary(hybrid, report="detailed"))
plot(hybrid)
con <- dbConnect("SQLite", system.file("data", "bug_metadata.db", package="hybridindex")
con <- dbConnect("SQLite", system.file("data", "bug_metadata.db", package="hybridindex"))
dbListFields(con, "ibitable2")
?test_that
install.packages("testthat")
library(testthat)
?testthat
?test_file
?contex
?context
?test_dir
?test_package
test_package("base")
?UseMethod
lapply(list.files("hybridindex/r"), function(file)source(paste("hybridindex/r/", file, sep="")))
library(randomForest)
library(plyr)
library(doParallel)
library(vegan)
library(ggmap)
library(reshape2)
library(RSQLite)
library(stringr)
lapply(list.files("hybridindex/r"), function(file)source(paste("hybridindex/r/", file, sep="")))
con <- dbConnect("SQLite", system.file("data", "bug_metadata.db", package="hybridindex"))
con
lapply(list.files("hybridindex/r"), function(file)source(paste("hybridindex/r/", file, sep="")))
traceback()
source('P:/PartTimers/MarkEngeln/bug_mmi/hybridindex/R/class2_oe.r', echo=TRUE)
source('P:/PartTimers/MarkEngeln/bug_mmi/hybridindex/R/class1_bugs.r', echo=TRUE)
traceback()
setwd("P:/PartTimers/MarkEngeln/bug_mmi/hybridindex")
lapply(list.files("r"), function(file)source(paste("r/", file, sep="")))
?package.skeleton
package.skeleton(name="test", list=ls())
package.skeleton(name="test", list=ls(), code_files=list.files("r"))
library(roxyben)
library(roxygen)
install.packages("roxygen")
library(roxygen)
install.packages("roxygen2")
library("roxygen2")
install.packages("roxygen3")
library(devtools)
install_github("roxygen3")
library(roxygen3)
?roxygen3
?roxygenise
roxygenise("C:/Documents and Settings/gisuser/Desktop/hybridindex/")
roxygenise("C:/Documents and Settings/gisuser/Desktop/hybridindex")
traceback()
roxygenise("C:/Documents and Settings/gisuser/Desktop/hybridindex")
library(roxygen2)
roxygenise("C:/Documents and Settings/gisuser/Desktop/hybridindex")
roxygenise("C:/Documents and Settings/gisuser/Desktop/hybridindex")
roxygenise("C:/Documents and Settings/gisuser/Desktop/hybridindex_test")
roxygenise("C:/Documents and Settings/gisuser/Desktop/hybridindex_test")
roxygenise("C:/Documents and Settings/gisuser/Desktop/hybridindex_test")
closeAllConnections()
con
con <- dbConnect("SQLite", "data/bug_metadata.db")
library(RSQLite)
con <- dbConnect("SQLite", "data/bug_metadata.db")
con <- dbConnect("hybridindex/SQLite", "data/bug_metadata.db")
con <- dbConnect("hybridindex/SQLite/", "data/bug_metadata.db")
con = dbConnect("SQLite", "hybridindex/data/bug_metadata.db"))
con = dbConnect("SQLite", "hybridindex/data/bug_metadata.db")
unique(dbGetQuery(con, "SELECT FinalID FROM ibitable2"))
taxa <- unique(dbGetQuery(con, "SELECT FinalID FROM ibitable2"))
head(taxa)
taxa <- unique(dbGetQuery(con, "SELECT FinalID FROM ibitable2")$FinalID)
head(taxa)
LETTERS
sample(LETTERS, 5)
sample(LETTERS, 5, collapse="")
paste(sample(LETTERS, 5), collapse="")
StationCode <- sapply(1:10, function(i)rep(paste(sample(LETTERS, 5), collapse=""), times=20))
StationCode
paste(sample(LETTERS, 5), collapse="")
StationCode <- unlist(sapply(1:10, function(i)rep(paste(sample(LETTERS, 5), collapse=""), times=20)))
StationCode
StationCode <- as.vector(sapply(1:10, function(i)rep(paste(sample(LETTERS, 5), collapse=""), times=20)))
StationCode
?rint
?rnorm
?runif
runif(200, 0, 100)
round(runif(200, 0, 100))
taxa <- unique(dbGetQuery(con, "SELECT FinalID, LifeStageCode FROM ibitable2"))
View(taxa)
nrow(taxa)
StationCode <- as.vector(sapply(1:10, function(i)rep(paste(sample(LETTERS, 5), collapse=""), times=20)))
SampleID <- StationCode
taxaIndex <- runif(200, 1, 8626)
FinalID <- taxa$FinalID[taxaIndex]
LifeStageCode <- taxa$LifeStageCode[taxaIndex]
BAResult <- paste(sample(LETTERS, 5), collapse="")
DistinctCode <- rep(NA, 200)
test.bugdata <- data.frame(StationCode, SampleID, FinalID, LifeStageCode, BAResult, DistinctCode)
View(test.bugdata)
BAResult <- runif(200, 0, 100)
DistinctCode <- rep(NA, 200)
test.bugdata <- data.frame(StationCode, SampleID, FinalID, LifeStageCode, BAResult, DistinctCode)
View(test.bugdata)
BAResult <- round(runif(200, 0, 100))
DistinctCode <- rep(NA, 200)
test.bugdata <- data.frame(StationCode, SampleID, FinalID, LifeStageCode, BAResult, DistinctCode)
View(test.bugdata)
val.pred2 <- read.csv("validation/val.pred2.csv")
View(val.pred2)
View(taxa)
taxonomytable <- dbGetQuery(con, "SELECT ibitable2")
taxonomytable <- dbGetQuery(con, "SELECT * FROM ibitable2")
View(taxonomytable)
write.csv(taxonomytable[, -1], file="finaltaxonomytable.csv")
class(taxonomytable)
class(taxonomytable) <- "taxon"
class(taxonomytable)
class(taxonomytable) <- c("taxon", "data.frame")
class(taxonomytable)
mea
mean
mean()
mean.default
mode(taxonomytable)
mode(taxa)
?UseMethod
methods("Math")
methods("Summary")
system.file("data", "forestsdb", package="hybridindex")
system.file(forestsdb", package="hybridindex")
system.file("forestsdb", package="hybridindex")
system.file(package="hybridindex")
system.file("data", package="hybridindex")
system.file("data/forestsdb", package="hybridindex")
?system.file
system.file("INDEX")
system.file("data", "forestsdb.rdx", package="hybridindex")
lazyLoad(system.file("data", "forestsdb.rdx", package="hybridindex"))
system.file("data", package="hybridindex")
lazyLoad(paste(system.file("data", package="hybridindex"), "/forestsdb", sep==""))
lazyLoad(paste(system.file("data", package="hybridindex"), "/forestsdb", sep=""))
load(system.file("data", "base_map.rdata", package="hybridindex"))
install.packages("hybridindex_1.3.tar.gz", repos=NULL, type="source")
library(hybridxindex)
system.file("data", "bug_metadata.db", package="hybridindex")
library(hybridindex)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot(hybrid)
hybrid@mean.metric
setMethod("plot", "metricMean", function(x="metricMean"){
load(system.file("data", "base_map.rdata", package="hybridindex"))
x@mean.metric$HybridScore <- cut(x@mean.metric$Hybrid, breaks=c(0, .4, .8, 1.5), labels=c("low", "medium", "high"))
hscore <- cbind(x@mean.metric$HybridScore, x@mean.metric$Hybrid, x@predictors[, c("StationCode", "SampleID", "New_Lat", "New_Long")])
names(hscore)[1] <- "HybridScore"
ggmap(base_map) +
geom_point(data=hscore, aes(x=New_Long, y=New_Lat, colour=Hybrid), size=4, alpha=.6)
})
plot(hybrid)
setMethod("plot", "metricMean", function(x="metricMean"){
load(system.file("data", "base_map.rdata", package="hybridindex"))
x@mean.metric$HybridScore <- cut(x@mean.metric$Hybrid, breaks=c(0, .4, .8, 1.5), labels=c("low", "medium", "high"))
hscore <- cbind(x@mean.metric$HybridScore, x@mean.metric$Hybrid, x@predictors[, c("StationCode", "SampleID", "New_Lat", "New_Long")])
names(hscore)[1] <- "HybridScore"
names(hscore)[2] <- "Hybrid"
ggmap(base_map) +
geom_point(data=hscore, aes(x=New_Long, y=New_Lat, colour=Hybrid), size=4, alpha=.6)
})
plot(hybrid)
setMethod("plot", "metricMean", function(x="metricMean"){
load(system.file("data", "base_map.rdata", package="hybridindex"))
x@mean.metric$HybridScore <- cut(x@mean.metric$Hybrid, breaks=c(0, .4, .8, 1.5), labels=c("low", "medium", "high"))
hscore <- cbind(x@mean.metric$HybridScore, x@mean.metric$Hybrid, x@predictors[, c("StationCode", "SampleID", "New_Lat", "New_Long")])
names(hscore)[1] <- "HybridScore"
names(hscore)[2] <- "Hybrid"
ggmap(base_map) +
geom_point(data=hscore, aes(x=New_Long, y=New_Lat, colour=Hybrid), size=4, alpha=.6) + scale_color_continuous(low="red", high="blue")
})
plot(hybrid)
setMethod("plot", "metricMean", function(x="metricMean"){
load(system.file("data", "base_map.rdata", package="hybridindex"))
x@mean.metric$HybridScore <- cut(x@mean.metric$Hybrid, breaks=c(0, .4, .8, 1.5), labels=c("low", "medium", "high"))
hscore <- cbind(x@mean.metric$HybridScore, x@mean.metric$Hybrid, x@predictors[, c("StationCode", "SampleID", "New_Lat", "New_Long")])
names(hscore)[1] <- "HybridScore"
names(hscore)[2] <- "Hybrid"
ggmap(base_map) +
geom_point(data=hscore, aes(x=New_Long, y=New_Lat, colour=Hybrid), size=4, alpha=.6) +
scale_color_continuous(low="red", high="blue") + labs(x="", y="", legend="Hybrid Index Score")
})
plot(hybrid)
?labs
setMethod("plot", "metricMean", function(x="metricMean"){
load(system.file("data", "base_map.rdata", package="hybridindex"))
x@mean.metric$HybridScore <- cut(x@mean.metric$Hybrid, breaks=c(0, .4, .8, 1.5), labels=c("low", "medium", "high"))
hscore <- cbind(x@mean.metric$HybridScore, x@mean.metric$Hybrid, x@predictors[, c("StationCode", "SampleID", "New_Lat", "New_Long")])
names(hscore)[1] <- "HybridScore"
names(hscore)[2] <- "Hybrid"
ggmap(base_map) +
geom_point(data=hscore, aes(x=New_Long, y=New_Lat, colour=Hybrid), size=4, alpha=.6) +
scale_color_continuous(low="red", high="blue", title="Hybrid Index Score") + labs(x="", y="")
})
?labs
plot(hybrid)
?scale_color_continuous
setMethod("plot", "metricMean", function(x="metricMean"){
load(system.file("data", "base_map.rdata", package="hybridindex"))
x@mean.metric$HybridScore <- cut(x@mean.metric$Hybrid, breaks=c(0, .4, .8, 1.5), labels=c("low", "medium", "high"))
hscore <- cbind(x@mean.metric$HybridScore, x@mean.metric$Hybrid, x@predictors[, c("StationCode", "SampleID", "New_Lat", "New_Long")])
names(hscore)[1] <- "HybridScore"
names(hscore)[2] <- "Hybrid"
ggmap(base_map) +
geom_point(data=hscore, aes(x=New_Long, y=New_Lat, colour=Hybrid), size=4, alpha=.6) +
scale_color_continuous(low="red", high="blue") + labs(x="", y="") + + theme(legend.title="Hybrid Index Score")
})
?scale_color_continuous
plot(hybrid)
setMethod("plot", "metricMean", function(x="metricMean"){
load(system.file("data", "base_map.rdata", package="hybridindex"))
x@mean.metric$HybridScore <- cut(x@mean.metric$Hybrid, breaks=c(0, .4, .8, 1.5), labels=c("low", "medium", "high"))
hscore <- cbind(x@mean.metric$HybridScore, x@mean.metric$Hybrid, x@predictors[, c("StationCode", "SampleID", "New_Lat", "New_Long")])
names(hscore)[1] <- "HybridScore"
names(hscore)[2] <- "Hybrid"
ggmap(base_map) +
geom_point(data=hscore, aes(x=New_Long, y=New_Lat, colour=Hybrid), size=4, alpha=.6) +
scale_color_continuous(low="red", high="blue") + labs(x="", y="") +  theme(legend.title="Hybrid Index Score")
})
plot(hybrid)
setMethod("plot", "metricMean", function(x="metricMean"){
load(system.file("data", "base_map.rdata", package="hybridindex"))
x@mean.metric$HybridScore <- cut(x@mean.metric$Hybrid, breaks=c(0, .4, .8, 1.5), labels=c("low", "medium", "high"))
hscore <- cbind(x@mean.metric$HybridScore, x@mean.metric$Hybrid, x@predictors[, c("StationCode", "SampleID", "New_Lat", "New_Long")])
names(hscore)[1] <- "HybridScore"
names(hscore)[2] <- "Hybrid"
ggmap(base_map) +
geom_point(data=hscore, aes(x=New_Long, y=New_Lat, colour=Hybrid), size=4, alpha=.6) +
scale_color_continuous(low="red", high="blue") + labs(x="", y="") + theme(legend.title="Hybrid Index Score")
})
setMethod("plot", "metricMean", function(x="metricMean"){
load(system.file("data", "base_map.rdata", package="hybridindex"))
x@mean.metric$HybridScore <- cut(x@mean.metric$Hybrid, breaks=c(0, .4, .8, 1.5), labels=c("low", "medium", "high"))
hscore <- cbind(x@mean.metric$HybridScore, x@mean.metric$Hybrid, x@predictors[, c("StationCode", "SampleID", "New_Lat", "New_Long")])
names(hscore)[1] <- "HybridScore"
names(hscore)[2] <- "Hybrid"
ggmap(base_map) +
geom_point(data=hscore, aes(x=New_Long, y=New_Lat, colour=Hybrid), size=4, alpha=.6) +
scale_color_continuous(low="red", high="blue") + labs(x="", y="") + theme(legend.title=element_text("Hybrid Index Score"))
})
plot(hybrid)
setMethod("plot", "metricMean", function(x="metricMean"){
load(system.file("data", "base_map.rdata", package="hybridindex"))
x@mean.metric$HybridScore <- cut(x@mean.metric$Hybrid, breaks=c(0, .4, .8, 1.5), labels=c("low", "medium", "high"))
hscore <- cbind(x@mean.metric$HybridScore, x@mean.metric$Hybrid, x@predictors[, c("StationCode", "SampleID", "New_Lat", "New_Long")])
names(hscore)[1] <- "HybridScore"
names(hscore)[2] <- "Hybrid"
ggmap(base_map) +
geom_point(data=hscore, aes(x=New_Long, y=New_Lat, colour=Hybrid), size=4, alpha=.6) +
scale_color_continuous(low="red", high="blue", name="Hybrid Index Score") + labs(x="", y="")
})
plot(hybrid)
setMethod("plot", "metricMean", function(x="metricMean"){
load(system.file("data", "base_map.rdata", package="hybridindex"))
x@mean.metric$HybridScore <- cut(x@mean.metric$Hybrid, breaks=c(0, .4, .8, 1.5), labels=c("low", "medium", "high"))
hscore <- cbind(x@mean.metric$HybridScore, x@mean.metric$Hybrid, x@predictors[, c("StationCode", "SampleID", "New_Lat", "New_Long")])
names(hscore)[1] <- "HybridScore"
names(hscore)[2] <- "Hybrid"
ggmap(base_map) +
geom_point(data=hscore, aes(x=New_Long, y=New_Lat, colour=Hybrid), size=4, alpha=.6) +
scale_color_continuous(low="red", mid="green", high="blue", name="Hybrid Index Score") + labs(x="", y="")
})
plot(hybrid)
?scale_colour_continuous
library(hybridindex)
if(report %in% c("standard", "detailed", "complete")){
setMethod("plot", "metricMean", function(x="metricMean"){
load(system.file("data", "base_map.rdata", package="hybridindex"))
x@mean.metric$HybridScore <- cut(x@mean.metric$Hybrid, breaks=c(0, .4, .8, 1.5), labels=c("low", "medium", "high"))
hscore <- cbind(x@mean.metric$HybridScore, x@mean.metric$Hybrid, x@predictors[, c("StationCode", "SampleID", "New_Lat", "New_Long")])
names(hscore)[1] <- "HybridScore"
names(hscore)[2] <- "Hybrid"
ggmap(base_map) +
geom_point(data=hscore, aes(x=New_Long, y=New_Lat, colour=Hybrid), size=4, alpha=.6) +
scale_color_continuous(low="red", mid="green", high="green", name="Hybrid Index Score") + labs(x="", y="")
})
plot(hybrid)
setMethod("plot", "metricMean", function(x="metricMean"){
load(system.file("data", "base_map.rdata", package="hybridindex"))
x@mean.metric$HybridScore <- cut(x@mean.metric$Hybrid, breaks=c(0, .4, .8, 1.5), labels=c("low", "medium", "high"))
hscore <- cbind(x@mean.metric$HybridScore, x@mean.metric$Hybrid, x@predictors[, c("StationCode", "SampleID", "New_Lat", "New_Long")])
names(hscore)[1] <- "HybridScore"
names(hscore)[2] <- "Hybrid"
ggmap(base_map) +
geom_point(data=hscore, aes(x=New_Long, y=New_Lat, colour=Hybrid), size=4, alpha=.6) +
scale_color_continuous(low="red", high="green", name="Hybrid Index Score") + labs(x="", y="")
})
plot(hybrid)
setMethod("plot", "metricMean", function(x="metricMean"){
load(system.file("data", "base_map.rdata", package="hybridindex"))
x@mean.metric$HybridScore <- cut(x@mean.metric$Hybrid, breaks=c(0, .4, .8, 1.5), labels=c("low", "medium", "high"))
hscore <- cbind(x@mean.metric$HybridScore, x@mean.metric$Hybrid, x@predictors[, c("StationCode", "SampleID", "New_Lat", "New_Long")])
names(hscore)[1] <- "HybridScore"
names(hscore)[2] <- "Hybrid"
ggmap(base_map) +
geom_point(data=hscore, aes(x=New_Long, y=New_Lat, colour=Hybrid), size=4, alpha=.8) +
scale_color_continuous(low="red", high="green", name="Hybrid Index Score") + labs(x="", y="")
})
plot(hybrid)
library(hybridindex)
