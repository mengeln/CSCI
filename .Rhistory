library(cluster)
?kmean
?kmeans
?pam
?rda
args(args)
?args
source('P:/PartTimers/MarkEngeln/bug_mmi/r/classes.r', echo=TRUE)
args(plot)
library(RSQLite)
"SQLite", "data/bug_metadata.db"
conn = dbConnect("SQLite", "data/bug_metadata.db")
bugspa <- dbGetQuery(conn, "SELECT * FROM bugs.pa")
dbListTables(conn)
bugspa <- dbGetQuery(conn, "SELECT * FROM bugs_pa")
bugspa <- dbGetQuery(conn, "SELECT * FROM bugcal_pa")
View(bugspa)
bugnames <- read.delim("clipboard", header=T)
View(bugnames)
setequal(names(bugspa), bugnames[, 1])
setdiff(names(bugspa), bugnames[, 1])
names(bugspa)
finalnames <- read.delim("clipboard", header=T)
setdiff(names(bugspa), finalnames)
setdiff(names(bugspa), finalnames[, 1])
setdiff(finalnames[, 1], names(bugspa))
?setdiff
length(finalnames[, 1])
length(names(bugspa))
head(names(bugspa))
head(finalnames[, 1]
)
columnnames <- names(bugspa)[2:length(names(bugspa))]
str(bugnames)
bugnames <- as.character(bugnames)
bugnames
bugnames <- read.delim("clipboard", header=T)
bugnames <- as.character(bugnames[, 1])
bugnames <- bugnames[match(bugnames, columnnames)]
head(bugnames)
head(columnnames)
match(bugnames, columnnames)
bugnames <- bugnames[match(bugnames, columnnames)]
head(bugnames)
bugnames <- bugnames[columnnames]
head(bugnames)
bugnames <- read.delim("clipboard", header=-T)
View(bugnames)
bugnames <- read.delim("clipboard", header=T)[, 1]
bugnames <- as.character(read.delim("clipboard", header=T)[, 1])
fix(bugnames)
head(bugnames)
head(columnnames)
bugnames.c <- bugnames
bugnames.c <- merge(columnnames, bugnames.c, all=T)
View(bugnames.c)
bugnames.c <- merge(columnnames, bugnames.c, all=F, all.x=T)
bugnames.c <- bugnames
bugnames.c <- merge(columnnames, bugnames.c, all=F, all.x=T)
bugnames.c <- bugnames
bugnames.c <- merge(columnnames, bugnames.c, all=F, all.x=T, all.y=F)
bugnames.c <- bugnames
bugnames.c <- bugnames.c[match(columnnames, bugnames.c)]
head(bugnames.c)
namechange <- read.delim("clipboard", header=T)
View(namechange)
View(namechange)
namechange <- namechange[match(columnnames, namechange$Existing.names)]
View(namechange)
namechange <- namechange[match(columnnames, namechange$Existing.name)]
namechange <- namechange[match(columnnames, namechange$Existing.name)]
namechange <- namechange[match(columnnames, namechange$Existing.name)]
namechange <- namechange[match(columnnames, namechange$Existing.name),]
View(namechange)
head(namechange$Final)
head(columnnames)
bugscal_pa2 <- bugspa[, 2:nrow(bugspa)]
bugscal_pa2 <- bugspa[, 2:ncol(bugspa)]
row.names(bugscal_pa2) <- bugspa[, 1]
View(bugscal_pa2)
names(bugscal_pa2) <- namechange$Final
View(finalnames)
View(namechange)
dbWriteTable(conn, "bugscal_pa2", bugscal_pa2)
?by
?with
ibitable <- read.delim("clipboard", header=T)
View(ibitable)
effort <- read.delim("clipboard", header=T)
ibitable2 <- merge(ibitable, effort)
View(ibitable2)
ibitable2 <- merge(ibitable, effort, all.x=T)
View(ibitable2)
dbWriteTable(conn, "ibitable2", ibitable2)
View(ibitable)
View(ibitable2)
head(paste(ibitable2$FinalID, ibitable2$LifeStageCode))
head(paste(ibitable2$FinalID, ibitable2$LifeStageCode), sep="_")
head(paste(ibitable2$FinalID, ibitable2$LifeStageCode), sep=".")
head(paste(ibitable2$FinalID, ibitable2$LifeStageCode), sep="")
head(paste(ibitable2$FinalID, ibitable2$LifeStageCode, sep="_"))
View(ibitable2)
?svd
source('~/.active-rstudio-document', echo=TRUE)
val.bugs <- read.csv("C:/Documents and Settings/gisuser/Desktop/val.bugs.csv", stringsAsFactors=F)
val.pred <- read.csv("C:/Documents and Settings/gisuser/Desktop/val.pred.csv", stringsAsFactors=F)
val.bugs$SampleID <- paste(val.bugs$StationCode, val.bugs$SampleDate, val.bugs$CollectionMethodCode, val.bugs$Replicate)
val.bugs$DistinctCode <- rep("", nrow(val.bugs))
#val.pred$LogWSA <- log10(val.pred$AREA_SQKM)
mmidata <- new("mmi", bugdata=val.bugs, predictors=val.pred)
mmiresults <- score(mmidata)
View(ibitable2)
source('~/.active-rstudio-document', echo=TRUE)
mmiresults <- score(mmidata)
unique(ibitable2$TaxonomicLevelName)
ibitable2[which(is.na(ibitable2$TaxonomicLevelName))]
ibitable2[which(is.na(ibitable2$TaxonomicLevelName)),]
namechange[namechange$Existing.name=="Blepharicerinae",]
ibitable2[which(ibitable2$TaxonomicLevelName=="Subspecies")]
ibitable2[which(ibitable2$TaxonomicLevelName=="Subspecies"),]
newtable <- read.delim("clipboard", header=T)
newtable2 <- merge(ibitable2, newtable2, all=T)
newtable2 <- merge(ibitable2, newtable, all=T)
View(newtable2)
write.csv(newtable2, file="updatedibi.csv")
View(ibitable2)
unique(ibitable2$LifeStageCode)
newtable <- read.delim("clipboard", header=T)
newtable2 <- merge(ibitable2, newtable, all=T)
View(newtable2)
str(newtable2)
write.csv(newtable2, file="updatedibi.csv")
list.files("r")
lapply(list.files("r"), function(file)source(paste("r/", file, sep="")))
rm(list=ls())
load("data/base_map.rdata")
lazyLoad("data/forestsdb")
lapply(list.files("r"), function(file)source(paste("r/", file, sep="")))
rm(list=ls())
lapply(list.files("r"), function(file)source(paste("r/", file, sep="")))
rm(list=ls())
list.files("r")
list.files("r")
lapply(list.files("r"), function(file)source(paste("r/", file, sep="")))
library(randomForest)
library(plyr)
library(doParallel)
library(vegan)
library(ggmap)
library(reshape2)
library(RSQLite)
library(stringr)
load("data/base_map.rdata")
lazyLoad("data/forestsdb")
val.bugs <- read.csv("C:/Documents and Settings/gisuser/Desktop/val.bugs.csv", stringsAsFactors=F)
val.pred <- read.csv("C:/Documents and Settings/gisuser/Desktop/val.pred.csv", stringsAsFactors=F)
val.bugs$SampleID <- paste(val.bugs$StationCode, val.bugs$SampleDate, val.bugs$CollectionMethodCode, val.bugs$Replicate)
val.bugs$DistinctCode <- rep("", nrow(val.bugs))
mmidata <- new("mmi", bugdata=val.bugs, predictors=val.pred)
mmiresults <- score(mmidata)
mmidata@dbconn
con <- mmidata@dbconn
dbListTables(con)
View(dbGetQuery(con, "SELECT * FROM ibitable2"))
taxontable <- read.delim("clipboard", header=T)
View(taxontable)
dbtaxa <- (dbGetQuery(con, "SELECT * FROM ibitable2"))
totaltaxa <- merge(taxontable, dbtaxa)
View(totaltaxa)
dbWriteTable(con, "ibitable2", totaltaxa)
dbGetQuery(con, "DROP TABLE ibitable2")
dbListTables(con)
dbWriteTable(con, "ibitable2", totaltaxa)
row.names(totaltaxa)
dbWriteTable(con, "ibitable2", totaltaxa)
dbWriteTable(con, "ibitable3", totaltaxa)
names(totaltaxa)
totaltaxa[, -which(names(totaltaxa=="row_names")),]
totaltaxa[, -which(names(totaltaxa)=="row_names"),]
names(totaltaxa[, -which(names(totaltaxa)=="row_names"),])
totaltaxa <- totaltaxa[, -which(names(totaltaxa)=="row_names"),]
dbWriteTable(con, "ibitable2", totaltaxa)
dbListTables(con)
mmiresults <- score(mmidata)
View(summary(mmiresults))
oedata <- new("oe", bugdata=val.bugs.test, predictors=val.pred)
oedata <- new("oe", bugdata=val.bugs, predictors=val.pred)
oeresults <- score(oedata)
traceback()
oeresults <- score(oedata)
lapply(list.files("r"), function(file)source(paste("r/", file, sep="")))
oeresults <- score(oedata)
lapply(list.files("r"), function(file)source(paste("r/", file, sep="")))
oeresults <- score(oedata)
View(summary(oeresults))
hybrid <- new("metric.mean", mmiresults, oeresults)
View(summary(hybrid, report="detailed"))
?.C
library(vegan)
metaMDS
monoMDS
dbListFields(con, ibitable2)
dbListFields(con, "ibitable2")
library(randomForest)
library(plyr)
library(doParallel)
library(vegan)
library(ggmap)
library(reshape2)
library(RSQLite)
library(stringr)
lapply(list.files("r"), function(file)source(paste("r/", file, sep="")))
val.bugs <- read.csv("C:/Documents and Settings/gisuser/Desktop/val.bugs.csv", stringsAsFactors=F)
val.pred <- read.csv("C:/Documents and Settings/gisuser/Desktop/val.pred.csv", stringsAsFactors=F)
val.bugs$SampleID <- paste(val.bugs$StationCode, val.bugs$SampleDate, val.bugs$CollectionMethodCode, val.bugs$Replicate)
val.bugs$DistinctCode <- rep("", nrow(val.bugs))
lapply(list.files("r"), function(file)source(paste("r/", file, sep="")))
rm(list=ls())
lapply(list.files("r"), function(file)source(paste("r/", file, sep="")))
val.bugs <- read.csv("C:/Documents and Settings/gisuser/Desktop/val.bugs.csv", stringsAsFactors=F)
val.pred <- read.csv("C:/Documents and Settings/gisuser/Desktop/val.pred.csv", stringsAsFactors=F)
val.bugs$SampleID <- paste(val.bugs$StationCode, val.bugs$SampleDate, val.bugs$CollectionMethodCode, val.bugs$Replicate)
val.bugs$DistinctCode <- rep("", nrow(val.bugs))
ldata <- read.delim("clipboard", header=T)
View(ldata)
str(ldata)
ldata <- read.delim("clipboard", header=T, stringsAsFactors=F)
str(ldata)
val.bugs2 <- merge(val.bugs, ldata, all=F, all.x=F, all.y=F)
View(val.bugs2)
unique(val.bugs2$StationCode)
val.pred2 <- val.pred[which(val.pred$StationCode %in% unique(val.bugs2$StationCode)), ]
View(val.pred2)
mmidata <- new("mmi", bugdata=val.bugs2, predictors=val.pred2)
mmiresults <- score(mmidata)
traceback()
con <- dbConnect("SQLite", "data/bug_metadata.db")
dbListFields(con, "ibitable2")
lapply(list.files("r"), function(file)source(paste("r/", file, sep="")))
mmidata <- new("mmi", bugdata=val.bugs2, predictors=val.pred2)
mmiresults <- score(mmidata)
lapply(list.files("r"), function(file)source(paste("r/", file, sep="")))
mmiresults <- score(mmidata)
traceback()
View(val.bugs2)
str(val.bugs2)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/class2_mmi.r', echo=TRUE)
mmiresults <- score(mmidata)
?merge
source('~/.active-rstudio-document', echo=TRUE)
mmiresults <- score(mmidata)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/class2_mmi.r', echo=TRUE)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/class2_mmi.r', echo=TRUE)
mmiresults <- score(mmidata)
View(summary(mmiresults))
oedata <- new("oe", bugdata=val.bugs, predictors=val.pred)
oeresults <- score(oedata)
hybrid <- new("metric.mean", mmiresults, oeresults)
hybrid <- new("metricMean", mmiresults, oeresults)
View(summary(hybrid, report="detailed"))
summary(hybrid, report="detailed")
View(summary(oesresults))
View(summary(oeresults))
View(summary(hybrid, report="detailed"))
traceback()
View(summary(oeresults))
oedata <- new("oe", bugdata=val.bugs2, predictors=val.pred2)
oeresults <- score(oedata)
hybrid <- new("metricMean", mmiresults, oeresults)
View(summary(hybrid, report="detailed"))
source('P:/PartTimers/MarkEngeln/bug_mmi/r/class3_metricMean.r', echo=TRUE)
hybrid <- new("metricMean", mmiresults, oeresults)
source('P:/PartTimers/MarkEngeln/bug_mmi/r/class2_mmi.r', echo=TRUE)
mmidata <- new("mmi", bugdata=val.bugs2, predictors=val.pred2)
plot(hybrid)
View(summary(hybrid, report="detailed"))
library(devtools)
build(pkg="hybridindex")
build(pkg="hybridindex")
write.csv(val.bugs2, file="validation/val.bugs2.csv")
write.csv(val.pred2, file="validation/val.pred2.csv")
val.bugs2 <- read.csv("P:/PartTimers/MarkEngeln/bug_mmi/validation/val.bugs2.csv", stringsAsFactors=F)
View(val.bugs2)
install.packages("P:/PartTimers/MarkEngeln/bug_mmi/hybridindex_1.3.tar.gz", repos = NULL)
install.packages("P:/PartTimers/MarkEngeln/bug_mmi/hybridindex_1.3.tar.gz", repos = NULL, type="source")
library(devtools)
build(pkg="hybridindex")
install.packages("P:/PartTimers/MarkEngeln/bug_mmi/hybridindex_1.3.tar.gz", repos = NULL, type="source")
library(hybridindex)
val.bugs2 <- read.csv("P:/PartTimers/MarkEngeln/bug_mmi/validation/val.bugs2.csv", stringsAsFactors=F)
val.pred2 <- read.csv("P:/PartTimers/MarkEngeln/bug_mmi/validation/val.pred2.csv", stringsAsFactors=F)
mmidata <- new("mmi", bugdata=val.bugs2, predictors=val.pred2)
mmiresults <- score(mmidata)
oedata <- new("oe", bugdata=val.bugs2, predictors=val.pred2)
oeresults <- score(oedata)
hybrid <- new("metricMean", mmiresults, oeresults)
View(summary(hybrid, report="detailed"))
build(pkg="hybridindex")
install.packages("P:/PartTimers/MarkEngeln/bug_mmi/hybridindex_1.3.tar.gz", repos = NULL, type="source")
traceback()
install.packages("P:/PartTimers/MarkEngeln/bug_mmi/hybridindex_1.3.tar.gz", repos = NULL, type="source")
lapply(list.files("r"), function(file)source(paste("r/", file, sep="")))
library(randomForest)
library(plyr)
library(doParallel)
library(vegan)
library(ggmap)
library(reshape2)
library(RSQLite)
library(stringr)
rm(list=ls())
lapply(list.files("hybridindex/r"), function(file)source(paste("hybridindex/r/", file, sep="")))
traceback()
lapply(list.files("hybridindex/r"), function(file)source(paste("hybridindex/r/", file, sep="")))
lapply(list.files("hybridindex/r"), function(file)source(paste("hybridindex/r/", file, sep="")))
lapply(list.files("hybridindex/r"), function(file)source(paste("hybridindex/r/", file, sep="")))
val.bugs2 <- read.csv("P:/PartTimers/MarkEngeln/bug_mmi/validation/val.bugs2.csv", stringsAsFactors=F)
val.pred2 <- read.csv("P:/PartTimers/MarkEngeln/bug_mmi/validation/val.pred2.csv", stringsAsFactors=F)
mmidata <- new("mmi", bugdata=val.bugs2, predictors=val.pred2)
mmiresults <- score(mmidata)
oedata <- new("oe", bugdata=val.bugs2, predictors=val.pred2)
oeresults <- score(oedata)
hybrid <- new("metricMean", mmiresults, oeresults)
View(summary(hybrid, report="detailed"))
library(devtools)
build(pkg="hybridindex")
install.packages("P:/PartTimers/MarkEngeln/bug_mmi/hybridindex_1.3.tar.gz", repos = NULL, type="source")
val.bugs2 <- read.csv("P:/PartTimers/MarkEngeln/bug_mmi/validation/val.bugs2.csv", stringsAsFactors=F)
library(hybridindex)
val.pred2 <- read.csv("P:/PartTimers/MarkEngeln/bug_mmi/validation/val.pred2.csv", stringsAsFactors=F)
mmidata <- new("mmi", bugdata=val.bugs2, predictors=val.pred2)
mmiresults <- score(mmidata)
build(pkg="hybridindex")
install.packages("P:/PartTimers/MarkEngeln/bug_mmi/hybridindex_1.3.tar.gz", repos = NULL, type="source")
library(hybridindex)
val.bugs2 <- read.csv("P:/PartTimers/MarkEngeln/bug_mmi/validation/val.bugs2.csv", stringsAsFactors=F)
val.pred2 <- read.csv("P:/PartTimers/MarkEngeln/bug_mmi/validation/val.pred2.csv", stringsAsFactors=F)
mmidata <- new("mmi", bugdata=val.bugs2, predictors=val.pred2)
mmiresults <- score(mmidata)
oedata <- new("oe", bugdata=val.bugs2, predictors=val.pred2)
oeresults <- score(oedata)
hybrid <- new("metricMean", mmiresults, oeresults)
View(summary(hybrid, report="detailed"))
plot(hybrid)
View(val.pred2)
plot(mmiresults)
View(val.pred2)
hybrid@prediction
getSlots("metricMean")
View(hybrid@predictors)
View(hybrid@predictors)
build("hybridindex")
library(devtools)
build("hybridindex")
install.packages("P:/PartTimers/MarkEngeln/bug_mmi/hybridindex_1.3.tar.gz", repos = NULL, type="source")
library(hybridindex)
val.bugs2 <- read.csv("P:/PartTimers/MarkEngeln/bug_mmi/validation/val.bugs2.csv", stringsAsFactors=F)
val.pred2 <- read.csv("P:/PartTimers/MarkEngeln/bug_mmi/validation/val.pred2.csv", stringsAsFactors=F)
mmidata <- new("mmi", bugdata=val.bugs2, predictors=val.pred2)
mmiresults <- score(mmidata)
oedata <- new("oe", bugdata=val.bugs2, predictors=val.pred2)
oeresults <- score(oedata)
hybrid <- new("metricMean", mmiresults, oeresults)
View(summary(hybrid, report="detailed"))
plot(hybrid)
con <- dbConnect("SQLite", system.file("data", "bug_metadata.db", package="hybridindex")
con <- dbConnect("SQLite", system.file("data", "bug_metadata.db", package="hybridindex"))
dbListFields(con, "ibitable2")
?test_that
install.packages("testthat")
library(testthat)
?testthat
?test_file
?contex
?context
?test_dir
?test_package
test_package("base")
?UseMethod
lapply(list.files("hybridindex/r"), function(file)source(paste("hybridindex/r/", file, sep="")))
library(randomForest)
library(plyr)
library(doParallel)
library(vegan)
library(ggmap)
library(reshape2)
library(RSQLite)
library(stringr)
lapply(list.files("hybridindex/r"), function(file)source(paste("hybridindex/r/", file, sep="")))
con <- dbConnect("SQLite", system.file("data", "bug_metadata.db", package="hybridindex"))
con
lapply(list.files("hybridindex/r"), function(file)source(paste("hybridindex/r/", file, sep="")))
traceback()
source('P:/PartTimers/MarkEngeln/bug_mmi/hybridindex/R/class2_oe.r', echo=TRUE)
source('P:/PartTimers/MarkEngeln/bug_mmi/hybridindex/R/class1_bugs.r', echo=TRUE)
traceback()
setwd("P:/PartTimers/MarkEngeln/bug_mmi/hybridindex")
lapply(list.files("r"), function(file)source(paste("r/", file, sep="")))
?package.skeleton
package.skeleton(name="test", list=ls())
package.skeleton(name="test", list=ls(), code_files=list.files("r"))
library(roxyben)
library(roxygen)
install.packages("roxygen")
library(roxygen)
install.packages("roxygen2")
library("roxygen2")
install.packages("roxygen3")
library(devtools)
install_github("roxygen3")
library(roxygen3)
?roxygen3
?roxygenise
roxygenise("C:/Documents and Settings/gisuser/Desktop/hybridindex/")
roxygenise("C:/Documents and Settings/gisuser/Desktop/hybridindex")
traceback()
roxygenise("C:/Documents and Settings/gisuser/Desktop/hybridindex")
library(roxygen2)
roxygenise("C:/Documents and Settings/gisuser/Desktop/hybridindex")
roxygenise("C:/Documents and Settings/gisuser/Desktop/hybridindex")
roxygenise("C:/Documents and Settings/gisuser/Desktop/hybridindex_test")
roxygenise("C:/Documents and Settings/gisuser/Desktop/hybridindex_test")
roxygenise("C:/Documents and Settings/gisuser/Desktop/hybridindex_test")
closeAllConnections()
con
con <- dbConnect("SQLite", "data/bug_metadata.db")
library(RSQLite)
con <- dbConnect("SQLite", "data/bug_metadata.db")
con <- dbConnect("hybridindex/SQLite", "data/bug_metadata.db")
con <- dbConnect("hybridindex/SQLite/", "data/bug_metadata.db")
con = dbConnect("SQLite", "hybridindex/data/bug_metadata.db"))
con = dbConnect("SQLite", "hybridindex/data/bug_metadata.db")
unique(dbGetQuery(con, "SELECT FinalID FROM ibitable2"))
taxa <- unique(dbGetQuery(con, "SELECT FinalID FROM ibitable2"))
head(taxa)
taxa <- unique(dbGetQuery(con, "SELECT FinalID FROM ibitable2")$FinalID)
head(taxa)
LETTERS
sample(LETTERS, 5)
sample(LETTERS, 5, collapse="")
paste(sample(LETTERS, 5), collapse="")
StationCode <- sapply(1:10, function(i)rep(paste(sample(LETTERS, 5), collapse=""), times=20))
StationCode
paste(sample(LETTERS, 5), collapse="")
StationCode <- unlist(sapply(1:10, function(i)rep(paste(sample(LETTERS, 5), collapse=""), times=20)))
StationCode
StationCode <- as.vector(sapply(1:10, function(i)rep(paste(sample(LETTERS, 5), collapse=""), times=20)))
StationCode
?rint
?rnorm
?runif
runif(200, 0, 100)
round(runif(200, 0, 100))
taxa <- unique(dbGetQuery(con, "SELECT FinalID, LifeStageCode FROM ibitable2"))
View(taxa)
nrow(taxa)
StationCode <- as.vector(sapply(1:10, function(i)rep(paste(sample(LETTERS, 5), collapse=""), times=20)))
SampleID <- StationCode
taxaIndex <- runif(200, 1, 8626)
FinalID <- taxa$FinalID[taxaIndex]
LifeStageCode <- taxa$LifeStageCode[taxaIndex]
BAResult <- paste(sample(LETTERS, 5), collapse="")
DistinctCode <- rep(NA, 200)
test.bugdata <- data.frame(StationCode, SampleID, FinalID, LifeStageCode, BAResult, DistinctCode)
View(test.bugdata)
BAResult <- runif(200, 0, 100)
DistinctCode <- rep(NA, 200)
test.bugdata <- data.frame(StationCode, SampleID, FinalID, LifeStageCode, BAResult, DistinctCode)
View(test.bugdata)
BAResult <- round(runif(200, 0, 100))
DistinctCode <- rep(NA, 200)
test.bugdata <- data.frame(StationCode, SampleID, FinalID, LifeStageCode, BAResult, DistinctCode)
View(test.bugdata)
val.pred2 <- read.csv("validation/val.pred2.csv")
View(val.pred2)
View(taxa)
taxonomytable <- dbGetQuery(con, "SELECT ibitable2")
taxonomytable <- dbGetQuery(con, "SELECT * FROM ibitable2")
View(taxonomytable)
write.csv(taxonomytable[, -1], file="finaltaxonomytable.csv")
class(taxonomytable)
class(taxonomytable) <- "taxon"
class(taxonomytable)
class(taxonomytable) <- c("taxon", "data.frame")
class(taxonomytable)
mea
mean
mean()
mean.default
mode(taxonomytable)
mode(taxa)
?UseMethod
methods("Math")
methods("Summary")
system.file("data", "forestsdb", package="hybridindex")
system.file(forestsdb", package="hybridindex")
system.file("forestsdb", package="hybridindex")
system.file(package="hybridindex")
system.file("data", package="hybridindex")
system.file("data/forestsdb", package="hybridindex")
?system.file
system.file("INDEX")
system.file("data", "forestsdb.rdx", package="hybridindex")
lazyLoad(system.file("data", "forestsdb.rdx", package="hybridindex"))
system.file("data", package="hybridindex")
lazyLoad(paste(system.file("data", package="hybridindex"), "/forestsdb", sep==""))
lazyLoad(paste(system.file("data", package="hybridindex"), "/forestsdb", sep=""))
load(system.file("data", "base_map.rdata", package="hybridindex"))
install.packages("hybridindex_1.3.tar.gz", repos=NULL, type="source")
library(hybridxindex)
system.file("data", "bug_metadata.db", package="hybridindex")
library(hybridindex)
