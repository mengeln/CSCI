{
    "contents" : "\nlibrary(randomForest)\nlibrary(plyr)\nlibrary(doParallel)\nlibrary(vegan)\n\nload(\"data/FinalForests.Rdata\")\nload(\"data/ibiv4.RData\")\nload(\"data/taxonomy_v5.RData\")\nload(\"data/Metrics.Max.Min.Rdata\")\n\nmin <- c(Number_Coleoptera_Taxa.min.met, Number_Diptera_Taxa.min.met, Number_Scraper_Taxa.min.met,\n         Number_Predator_Taxa.min.met, Number_CF___CG_Taxa.min.met, Number_ShredderTaxa.min.met,\n         Percent_Intolerant_Taxa__0_2_.min.met, Percent_Non_Insecta_Taxa.min.met,\n         Tolerance_Value.min.met\n         )\nmax <- c(Number_Coleoptera_Taxa.max.met, Number_Diptera_Taxa.max.met, Number_Scraper_Taxa.max.met,\n         Number_Predator_Taxa.max.met, Number_CF___CG_Taxa.max.met, Number_ShredderTaxa.max.met,\n         Percent_Intolerant_Taxa__0_2_.max.met, Percent_Non_Insecta_Taxa.max.met,\n         Tolerance_Value.max.met\n         )\nmaxminlabels <- c(\"coleoptera\", \"diptera\", \"scraper\", \"predator\", \"cfcg\", \"shredder\",\n                  \"intolerant\", \"noninsect\", \"tolerance\")\nmaxmin <- data.frame(maxminlabels, max, min)\n\ntaxonomy <- idata.frame(taxonomy_v5)\nibi <- idata.frame(ibiv4)\n\nsetOldClass(\"randomForest.formula\")\nsetOldClass(\"idf\")\nmmi <- setClass(\"mmi\", \n                representation(bugdata = \"data.frame\", \n                               taxonomy = \"idf\",\n                               ibi = \"idf\",\n                               cf.randomForest = \"randomForest.formula\",\n                               coleoptera.randomForest = \"randomForest.formula\",\n                               predator.randomForest = \"randomForest.formula\",\n                               scraper.randomForest = \"randomForest.formula\",\n                               shredder.randomForest = \"randomForest.formula\",\n                               intolerant.randomForest = \"randomForest.formula\",\n                               noninsect.randomForest = \"randomForest.formula\",\n                               tolerance.randomForest = \"randomForest.formula\",\n                               subsample = \"data.frame\",\n                               metrics = \"data.frame\",\n                               predictors = \"data.frame\",\n                               modelprediction = \"data.frame\",\n                               maxmin = \"data.frame\",\n                               result = \"data.frame\",\n                               finalscore = \"data.frame\",\n                               datalength = \"numeric\"),\n                prototype = list(ibi = ibi,\n                                 taxonomy = taxonomy,\n                                 cf.randomForest = Number_CF___CG_Taxa.FinalForest,\n                                 coleoptera.randomForest = Number_Coleoptera_Taxa.FinalForest,\n                                 predator.randomForest = Number_Predator_Taxa.FinalForest,\n                                 scraper.randomForest = Number_Scraper_Taxa.FinalForest,\n                                 shredder.randomForest = Number_ShredderTaxa.FinalForest,\n                                 intolerant.randomForest = Percent_Intolerant_Taxa__0_2_.FinalForest,\n                                 noninsect.randomForest = Percent_Non_Insecta_Taxa.FinalForest,\n                                 tolerance.randomForest = Tolerance_Value.FinalForest,\n                                 subsample = data.frame(),\n                                 metrics = data.frame(),\n                                 residuals = data.frame(),\n                                 maxmin = maxmin,\n                                 result = data.frame(),\n                                 finalscore = data.frame(),\n                                 datalength = numeric()\n                                 )\n                )\nsetMethod(\"show\", \"mmi\", function(object){\n  print(head(object@bugdata))\n  print(head(object@predictors))\n  })\n\nsetGeneric(\"nameMatch\", function(object, effort = \"SAFIT1\")\n           standardGeneric(\"nameMatch\"))\nsetMethod(\"nameMatch\", \"mmi\", function(object, effort = \"SAFIT1\"){\n\n  colnames(object@bugdata)[which(colnames(object@bugdata) == \"FinalID\")] <- \"Taxa\"\n  colnames(object@bugdata)[which(colnames(object@bugdata) == \"BAResult\")] <- \"Result\"\n  \n  ###Aggregate taxa###\n  object@bugdata <- ddply(object@bugdata, \"SampleID\", function(df){\n    ddply(df, \"Taxa\", function(sdf){\n      id <- unique(sdf[, !(colnames(sdf) %in% \"Result\")])\n      Result <- sum(sdf$Result)\n      cbind(id, Result)\n    })\n  })\n  \n  ###Match to STE###\n  object@bugdata$STE <- rep(NA, length(object@bugdata$Taxa))\n  object@bugdata$STE <- object@ibi[match(object@bugdata$Taxa, object@ibi$FinalID), as.character(effort)]\n  object@bugdata$STE <- as.character(object@bugdata$STE)\n  object@bugdata$STE[which(is.na(object@bugdata$STE))] <- \"Missing\"\n  \n  ###Determine Distinctiveness###\n  distinctsorter <- function(taxon, data){\n    level <- object@taxonomy$TaxonomicLevelCode[match(taxon, object@taxonomy$FinalID)] \n    levelname <- as.character(object@taxonomy$TaxonomicLevelName[match(taxon, object@taxonomy$FinalID)])\n    samelevel <- object@taxonomy$FinalID[which(taxonomy[, levelname] == taxon)]\n    matchedlevel <- object@bugdata$STE %in% object@ibi$CustomSTE[match(samelevel, object@ibi$FinalID)]\n    result <- object@taxonomy$TaxonomicLevelCode[match(data$STE[matchedlevel], object@taxonomy$FinalID)] > level\n    length(which(result)) != 0\n  }\n  \n  distinctlist <- dlply(object@bugdata, \"SampleID\", function(df){\n    sapply(1:nrow(df), function(i){\n      ifelse(distinctsorter(df$STE[i], df), \"Non-Distinct\", \"Distinct\")\n    })})\n  object@bugdata$distinct <- unlist(distinctlist)\n  ###Override##\n  object@bugdata$DistinctCode <- as.character(object@bugdata$DistinctCode)\n  object@bugdata$distinct[which(object@bugdata$distinct == \"Non-distinct\" & object@bugdata$DistinctCode == \"Yes\")] <- \"Distinct\" \n  return(object)\n})\n\nsetGeneric(\"subsample\", function(object)\n  standardGeneric(\"subsample\"))\nsetMethod(\"subsample\", \"mmi\", function(object){\n  object@datalength <- length(object@bugdata)\n  object@bugdata$SampleID <- as.character(object@bugdata$SampleID)\n  rarifydown <- function(data){unlist(sapply(unique(data$SampleID), function(sample){\n    v <- data[data$SampleID==sample, \"Result\"]\n    if(sum(v)>=500){rrarefy(v, 500)} else\n    {v}\n  }))}\n  registerDoParallel()\n  rarificationresult <- foreach(i=1:20, .combine=cbind, .packages=\"vegan\") %dopar% {\n    rarifydown(object@bugdata)\n  }\n  object@subsample <- as.data.frame(cbind(object@bugdata, rarificationresult))\n  colnames(object@subsample)[(object@datalength + 1):(object@datalength + 20)]<- paste(\"Replicate\", 1:20)\n  return(object)\n})\n\nsetGeneric(\"metrics\", function(object)\n  standardGeneric(\"metrics\"))\nsetMethod(\"metrics\", \"mmi\", function(object){\n  object@subsample$MaxTol <- ibi$MaxTol[match(object@subsample$Taxa, object@ibi$FinalID)]\n  object@subsample$MaxTol <- as.numeric(object@subsample$MaxTol)\n  object@subsample$Class <- ibi$Class[match(object@subsample$Taxa, object@ibi$FinalID)]\n  object@subsample$Order <- as.character(object@ibi$Order[match(object@subsample$Taxa, object@ibi$FinalID)])\n  object@subsample$FunctionalFeedingGroup <- as.character(object@ibi$FunctionalFeedingGroup[match(object@subsample$Taxa, object@ibi$FinalID)])\n  \n  object@metrics <- as.data.frame(matrix(NA, nrow = length(unique(object@bugdata$SampleID)), ncol = 180))\n  for(i in 1:20){\n    ###Number of Coleoptera taxa###\n    object@metrics[[i]] <- ddply(object@subsample[object@subsample$distinct == \"Distinct\" & object@subsample[[object@datalength + i]]>0, ], \"SampleID\",\n                          function(d)length(unique(d$STE[d$Order == \"Coleoptera\"])))[, 2]  \t\t   \n    \n    ###Numer of Diptera taxa\n    object@metrics[[i+20]] <- ddply(object@subsample[object@subsample$distinct == \"Distinct\" & object@subsample[[object@datalength + i]]>0, ], \"SampleID\",\n                             function(d)length(unique(d$STE[d$Order == \"Diptera\"])))[, 2]\n    \n    ###Number of Scraper taxa###\n    object@metrics[[i+40]] <- ddply(object@subsample[object@subsample$distinct == \"Distinct\" & object@subsample[[object@datalength + i]]>0, ], \"SampleID\",\n                             function(d)length(unique(d$STE[which(d$FunctionalFeedingGroup == \"SC\")])))[, 2]\n    \n    ###Number of Predator taxa###\n    object@metrics[[i+60]] <- ddply(object@subsample[object@subsample$distinct == \"Distinct\" & object@subsample[[object@datalength + i]]>0, ], \"SampleID\",\n                             function(d)length(unique(d$STE[which(d$FunctionalFeedingGroup == \"P\")])))[, 2]\t\n    \n    ###Number of CF/CG taxa###\n    object@metrics[[i+80]] <- ddply(object@subsample[object@subsample$distinct == \"Distinct\" & object@subsample[[object@datalength + i]]>0, ], \"SampleID\",\n                                    function(d)length(unique(d$STE[which(d$FunctionalFeedingGroup %in% c(\"CF\", \"CG\"))])))[, 2]\n    \n    ###Number of Shredder taxa###\n    object@metrics[[i+100]] <- ddply(object@subsample[object@subsample$distinct == \"Distinct\" & object@subsample[[object@datalength + i]]>0, ], \"SampleID\",\n                                    function(d)length(unique(d$STE[which(d$FunctionalFeedingGroup == \"SH\")])))[, 2]\n    \n    \n    ###Percent Intolerant###\n    object@metrics[[i+120]] <- ddply(object@subsample, \"SampleID\",\n                              function(d){\n                                100*sum(d[which(d$MaxTol <= 2), object@datalength + 1])/sum(d[, object@datalength + 1])\n                              })[, 2]\n    \n    ###Percent NonInsect###\n    object@metrics[[i+140]] <- ddply(object@subsample, \"SampleID\",\n                                     function(d){\n                                       100*sum(d[which(d$Class != \"Insecta\"), object@datalength + 1])/sum(d[, object@datalength + 1])\n                                     })[, 2]\n    \n    ###Weighted Tolerance###\n    object@metrics[[i+160]] <- ddply(object@subsample, \"SampleID\",\n                              function(d){\n                                p <- which(!is.na(d$MaxTol))\n                                sum((d[p, object@datalength + i] * d$MaxTol[p]))/sum(d[p, object@datalength + i])\n                              })[, 2]\n    \n  }\n  \n  ###Means###\n  object@metrics$coleoptera <- apply(object@metrics[, 1:20], 1, mean)\n  object@metrics$diptera <- apply(object@metrics[, 21:40], 1, mean)\n  object@metrics$scraper <- apply(object@metrics[, 41:60], 1, mean)\n  object@metrics$predator <- apply(object@metrics[, 61:80], 1, mean)\n  object@metrics$cfcg <- apply(object@metrics[, 81:100], 1, mean)\n  object@metrics$shredder <- apply(object@metrics[, 101:120], 1, mean)\n  object@metrics$intolerant <- apply(object@metrics[, 121:140], 1, mean)\n  object@metrics$noninsect <- apply(object@metrics[, 141:160], 1, mean)\n  object@metrics$tolerance <- apply(object@metrics[, 161:180], 1, mean)\n  return(object)\n})\n\n\nsetGeneric(\"randomForest\", function(object)\n  standardGeneric(\"randomForest\"))\nsetMethod(\"randomForest\", \"mmi\", function(object){\n  object@predictors <- merge(unique(object@bugdata[, c(\"StationCode\", \"SampleID\")]), object@predictors, by=\"StationCode\")\n  object@modelprediction <- as.data.frame(matrix(NA, nrow = nrow(object@predictors)))\n  \n  object@modelprediction$coleoptera <- predict(object@coleoptera.randomForest, object@predictors)\n  object@modelprediction$diptera <- object@metrics$diptera\n  object@modelprediction$scraper <- predict(object@scraper.randomForest, object@predictors)\n  object@modelprediction$predator <- predict(object@predator.randomForest, object@predictors)\n  object@modelprediction$cfcg <- predict(object@cf.randomForest, object@predictors)\n  object@modelprediction$shredder <- predict(object@shredder.randomForest, object@predictors)\n  object@modelprediction$intolerant <- predict(object@intolerant.randomForest, object@predictors)\n  object@modelprediction$noninsect <- predict(object@noninsect.randomForest, object@predictors)\n  object@modelprediction$tolerance <- predict(object@tolerance.randomForest, object@predictors)\n  object@modelprediction$V1 <- unique(object@predictors$SampleID)\n  return(object)\n})\n  \nsetGeneric(\"score\", function(object)\n  standardGeneric(\"score\"))\nsetMethod(\"score\", \"mmi\", function(object){\n  object@result <- as.data.frame(matrix(NA, nrow = length(unique(object@modelprediction$V1)), ncol = 18))\n  colnames(object@result) <- c(\"coleoptera\", \"diptera\", \"scraper\", \"predator\", \"cfcg\", \"shredder\",\n                               \"intolerant\", \"noninsect\", \"tolerance\", \"coleoptera_score\", \"diptera_score\", \n                               \"scraper_score\", \"predator_score\", \"cfcg_score\", \"shredder_score\", \"intolerant_score\", \n                               \"noninsect_score\", \"tolerance_score\")\n  for(i in c(1, 3:7)){\n    object@result[, i] <- (object@metrics[, 180 + i] - object@modelprediction[, i+1] - maxmin[i, 3]) /\n      (maxmin[i, 2] - maxmin[i, 3])\n  } \n  object@result$diptera <- (object@modelprediction$diptera -  maxmin[2, 3]) /\n    (maxmin[2, 2] - maxmin[2, 3])\n  object@result$noninsect <- (object@metrics$noninsect - object@modelprediction$noninsect - maxmin[i, 2]) /\n    (maxmin[i, 3] - maxmin[i, 2])\n  object@result$tolerance <- (object@metrics$tolerance - object@modelprediction$tolerance - maxmin[i, 2]) /\n    (maxmin[i, 3] - maxmin[i, 2])\n  \n  for(i in 1:9)\n    object@result[, i + 9] <- ifelse(object@result[, i] <= 0, 0, ifelse(\n      object@result[, i] >= 1, 1, object@result[, i]))\n  \n  object@finalscore <- data.frame(unique(object@modelprediction$V1), apply(object@result[, 10:18], 1, mean))\n  return(object)\n  }         \n)\n\nsetMethod(\"mean\", \"mmi\", function(x = \"mmi\"){\n  score(randomForest(metrics(subsample(nameMatch(x)))))\n})\n\nsetMethod(\"summary\", \"mmi\", function(object = \"mmi\"){\n  d <- data.frame(object@finalscore, object@metrics[, 181:189], \n                  object@modelprediction, object@result[, 9:18])\n  d <- merge(unique(object@bugdata[, c(\"StationCode\", \"SampleID\")]), d, by.x=\"SampleID\", by.y=\"unique.object.modelprediction.V1.\")\n  colnames(d)[1:3] <- c(\"SampleID\", \"StationCode\", \"MMI Score\")\n  d\n})\n\n  ",
    "created" : 1348071263932.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "589753200",
    "id" : "BF3A8362",
    "lastKnownWriteTime" : 1348096410,
    "path" : "P:/PartTimers/MarkEngeln/bug_mmi/r/classes.r",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}